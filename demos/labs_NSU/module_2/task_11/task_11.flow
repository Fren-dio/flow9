import lib/maybe;
import lib/ds/tree;
import lib/ds/array;
import lib/string;
import lib/lingo/pegcode/driver;
import lib/math/math;



AlgExp ::= AlgSum, AlgSub, AlgMult, AlgDiv, AlgRat, AlgVar, AlgNeg;
AlgSum(l:AlgExp, r:AlgExp);
AlgSub(l:AlgExp, r:AlgExp);
AlgMult(l:AlgExp, r:AlgExp);
AlgDiv(l:AlgExp, r:AlgExp);
AlgVar(var:string);
AlgRat(num:int, den:int);
AlgNeg(l:AlgExp);


RatNum(num: int, den: int);

PolyMult(mult:Tree<string, int>);
PolySum(sum:Tree<PolyMult, int>);

RatFunc(nominator: PolySum, denominator:PolySum);



Polynom(sum: Tree<PolyProd, int>);
PolyProd(prod: Tree<string, int>);
RationalFunction(num: Polynom, den: Polynom);
alg2rf(e: ArExp) -> RationalFunction;
rf2s(rf: RationalFunction) -> string;

sumPolynoms(l: Polynom, r: Polynom) -> Polynom;
multPolynoms(l: Polynom, r: Polynom) -> Polynom;
multPolyProds(l: PolyProd, r: PolyProd) -> PolyProd;
p2s(p: Polynom) -> string;
pp2s(pp: PolyProd) -> string;

Rational(num: int, den: int);
multRationals(l: Rational, r: Rational) -> Rational;  
divRationals(l: Rational, r: Rational) -> Rational;  
sumRationals(l: Rational, r: Rational) -> Rational;
subRationals(l: Rational, r: Rational) -> Rational;
minusRational(r: Rational) -> Rational;
r2s(e: Rational) -> string;

p2s(e: Polynom) -> string {
    trim2(concatStrings(foldTree(e.sum, [], \k,v,acc -> concat(acc, [i2s(v) + pp2s(k) + " + "]))), " +");
}

rf2s(rf: RationalFunction) -> string {
    if (rf.den ==  Polynom(setTree(makeTree(), PolyProd(makeTree()), 1))) {
        p2s(rf.num);
    } else {
        concatStrings(["(", p2s(rf.num) ,") / (", p2s(rf.den) ,")"]);
    }
}

pp2s(e: PolyProd) -> string {
    rtrim2(concatStrings(foldTree(e.prod , [], \k, v, acc -> concat(acc, [k + "^" + i2s(v) + " * "]))), "*");
}

multPolyProds(l: PolyProd, r: PolyProd) -> PolyProd {
    PolyProd(mergeTreeCustom(l.prod, r.prod, \k, lv, rv -> rv + lv));
}

alg2rf(e: ArExp) -> RationalFunction {
    rf = switch (e) {
        SumExp(l,r): sumRationalFunctions(alg2rf(l) , alg2rf(r));
        MultExp(l,r): multRationalFunctions(alg2rf(l), alg2rf(r));
        SubExp(l,r): subRationalFunctions(alg2rf(l), alg2rf(r));
        DivExp(l,r): divRationalFunctions(alg2rf(l), alg2rf(r));
        MinusExp(expr): minusRationalFunction(alg2rf(expr));
        IntExp(v): RationalFunction(
            Polynom(setTree(makeTree(), PolyProd(makeTree()), v)),
            Polynom(setTree(makeTree(), PolyProd(makeTree()), 1))
        );
        VarExp(name): RationalFunction(
            Polynom(setTree(makeTree(), PolyProd(setTreeValues(makeTree(),[Pair(name, 1)])), 1)),
            Polynom(setTree(makeTree(), PolyProd(makeTree()), 1))
        );
    }
    rf2 = RationalFunction(filterPolynom(rf.num), filterPolynom(rf.den));
    polyGCD = gcd(coefGCD(rf2.num), coefGCD(rf2.den));
    rf3 = divRationalFunctionByInt(rf2, polyGCD);
    numGCD = coefGCD(rf3.num);
    rf3_num = divPolynomByInt(rf3.num, numGCD);
    if (rf3_num == rf3.den) {
        RationalFunction(Polynom(setTree(makeTree(), PolyProd(makeTree()), numGCD)), Polynom(setTree(makeTree(), PolyProd(makeTree()), 1)));
    } else {
        rf3;
    }
}

filterPolynom(p: Polynom) -> Polynom {
    Polynom(filterTree(p.sum, \k, v -> v != 0));
}

coefGCD(p: Polynom) -> int {
    initial = getTreeValues(p.sum)[0];
    foldTree(p.sum, initial, \k, v, acc -> gcd(acc,v));
}

divPolynomByInt(p: Polynom, c: int) -> Polynom {
    Polynom(mapTree(p.sum, \v -> v/c));
}

divRationalFunctionByInt(rf: RationalFunction, c: int) -> RationalFunction {
    RationalFunction(divPolynomByInt(rf.num, c), divPolynomByInt(rf.den, c));
}

sumRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
     RationalFunction(sumPolynoms(multPolynoms(l.num, r.den), multPolynoms(r.num, l.den)), multPolynoms(l.den, r.den));
 }

subRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
     RationalFunction(sumPolynoms(multPolynoms(l.num, r.den), minusPolynom(multPolynoms(r.num, l.den))), multPolynoms(l.den, r.den));
 }

multRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
     RationalFunction(multPolynoms(l.num, r.num), multPolynoms(l.den, r.den));
 }

divRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
     RationalFunction(multPolynoms(l.num, r.den), multPolynoms(l.den, r.num));
}

minusRationalFunction(rf: RationalFunction) -> RationalFunction {
     RationalFunction(minusPolynom(rf.num), rf.den);
}

sumPolynoms(l: Polynom, r: Polynom) {
    Polynom(mergeTreeCustom(l.sum, r.sum, \k, lv, rv -> lv + rv));
}

multPolynoms(l: Polynom, r: Polynom) {
    Polynom(foldTree(l.sum, makeTree(), \lp, lc, acc -> {
        foldTree(r.sum, acc, \rp, rc, ac -> {
            pp = multPolyProds(lp, rp);
            switch(lookupTree(ac, pp)) {
                Some(coef): setTree(ac, pp, coef + (lc * rc));
                None(): setTree(ac, pp, (lc * rc));
            }     
        });
    }));
}

minusPolynom(p: Polynom) -> Polynom {
     Polynom(mapTree(p.sum, \r -> -r));
}

multRationals(l: Rational, r: Rational) -> Rational {
    cdiv = gcd(l.num * r.num, l.den * r.den);
    Rational((l.num * r.num) / cdiv, (l.den * r.den) / cdiv);
}

minusRational(r: Rational) -> Rational{
     Rational(- r.num, r.den);
 }

divRationals(l: Rational, r: Rational) -> Rational {
    cdiv = gcd(l.num * r.den, l.den * r.num);
    Rational((l.num * r.den) / cdiv, (l.den * r.num) / cdiv);
}

sumRationals(l: Rational, r: Rational) -> Rational {
    if (l.den == r.den) {
        Rational(l.num + r.num, l.den);
    } else {
        cdiv = gcd(l.num * r.den + r.num * l.den, l.den * r.den);
        Rational((l.num * r.den + r.num * l.den) / cdiv, (l.den * r.den) / cdiv);
    }
}

subRationals(l: Rational, r: Rational) -> Rational {
    if (l.den == r.den) {
        if (l.num - r.num == 0) {
            Rational(l.num - r.num, 1);
        } else {
            Rational(l.num - r.num, l.den);
        }
    } else {
        cdiv = gcd(l.num * r.den - r.num * l.den, l.den * r.den);
        if (l.num * r.den - r.num * l.den == 0) { 
            Rational(l.num * r.den - r.num * l.den, 1);
        } else {
            Rational((l.num * r.den - r.num * l.den) / cdiv, (l.den * r.den) / cdiv);
        }
    }
}

r2s(e: Rational) -> string {
    if (e.den == 1) {
        i2s(e.num);
    } else {
        concatStrings([i2s(e.num), "/", i2s(e.den)]);
    }
}

ArExp ::= SumExp, MultExp, SubExp, DivExp, MinusExp, IntExp, VarExp;

SumExp(lhs:ArExp, rhs:ArExp);
MultExp(lhs:ArExp, rhs:ArExp);
SubExp(lhs:ArExp, rhs:ArExp);
DivExp(lhs:ArExp, rhs:ArExp);
MinusExp(expr: ArExp);
IntExp(val: int);
VarExp(name: string);

gram = "#include demos/labs_NSU/module_2/task_11/lingo.lingo"

ar2s(e: ArExp) -> string{
    switch (e) {
        SumExp(left,right): concatStrings(["(",ar2s(left),"+",ar2s(right),")"]);
        MultExp(left,right): concatStrings(["(",ar2s(left),"*",ar2s(right),")"]);
        SubExp(left,right): concatStrings(["(",ar2s(left),"-",ar2s(right),")"]);
        DivExp(left,right): concatStrings(["(",ar2s(left),"/",ar2s(right),")"]);
        MinusExp(expr): concatStrings(["-",ar2s(expr)]);
        IntExp(value): i2s(value);
        VarExp(name): name;
    }
}

s2ar(s: string) -> ArExp {
    parser = compilePegGrammar(gram);
    parsic(parser, s, SemanticActions(setTree(defaultPegActions.t, "makeIntExp", \str -> IntExp(s2i(str[0])))));
}

eval(expr: ArExp, var_vals: Tree<string, int>) -> Maybe<int> {
    switch (expr) {
        SumExp(l, r): 
            switch (eval(l, var_vals)) {
                Some(lft): switch (eval(r, var_vals)) {
                                Some(rht): Some(lft + rht);
                                None(): None();
                            };
                None(): None();
            };
        MultExp(l, r): 
            switch(eval(l, var_vals)) {
                Some(lft): switch (eval(r, var_vals)) {
                                Some(rht): Some(lft * rht);
                                None(): None();
                            };
                None(): None();
            };
        SubExp(l, r): 
            switch (eval(l, var_vals)) {
                Some(lft): switch (eval(r, var_vals)) {
                                Some(rht): Some(lft - rht);
                                None(): None();
                            };
                None(): None();
            };
        DivExp(l, r): 
            switch (eval(l, var_vals)){
                Some(lft): switch (eval(r, var_vals)) {
                                Some(rht): if (rht == 0) {
                                                None();
                                            } else {
                                                Some(lft / rht);
                                            };
                                None(): None();
                };
                None(): None();
            };
        MinusExp(expression): 
            eval(SubExp(IntExp(0), expression), var_vals);
        IntExp(v): 
            Some(v);
        VarExp(name): 
            switch(lookupTree(var_vals, name)) {
                Some(v): Some(v);
                None(): None();
            };
    }
}

diff(expr: ArExp, var: string) -> ArExp {
    switch (expr) {
        SumExp(l, r): 
            SumExp(diff(l, var), diff(r, var));
        SubExp(l,r): 
            SubExp(diff(l, var), diff(r, var));
        MultExp(l,r): 
            SumExp(MultExp(diff(l, var), r), MultExp(l, diff(r, var)));
        DivExp(l,r): 
            DivExp(SubExp(MultExp(diff(l, var), r), MultExp(l, diff(r, var))), MultExp(r, r));
        MinusExp(expression):
            MinusExp(diff(expression, var));
        IntExp(v): 
            IntExp(0);
        VarExp(name):
            if (name == var) {
                IntExp(1);
            } else {
                IntExp(0);
            }; 
    }
}

simplify(expr) -> ArExp {
    a = switch (expr) {
        SumExp(l, r):
            if (l == IntExp(0) && r == IntExp(0)) {
                IntExp(0);
            } 
            else if (l == IntExp(0)) {
                r;
            }
            else if (r == IntExp(0)) {
                l;
            }
            else {
                SumExp(simplify(l), simplify(r));
            };
        SubExp(l, r): 
            if (l == IntExp(0) && r == IntExp(0)) {
                IntExp(0);
            } 
            else if (l == r ) {
                IntExp(0);
            }
            else if (l == IntExp(0)) {
                MinusExp(r);
            }
            else if (r == IntExp(0)) {
                l;
            }
            else {
                SubExp(simplify(l), simplify(r));
            };
        MultExp(l, r): 
            if (l == IntExp(0) || r == IntExp(0)) {
                IntExp(0);
            } 
            else if (l == IntExp(1)) {
                r;
            }
            else if (r == IntExp(1)) {
                l;
            } 
            else {
                MultExp(simplify(l), simplify(r));
            };
        DivExp(l, r): 
            if (l == r) {
                IntExp(1);
            }
            else if (r == IntExp(1)) {
                l;
            } 
            else {
                DivExp(simplify(l), simplify(r));
            };
        MinusExp(expression): 
            MinusExp(simplify(expression));
        IntExp(v): 
            IntExp(v);
        VarExp(name): 
            VarExp(name); 
    }
    if (a == expr){
        a;
    } else {
        simplify(a);
    }
}

convertStr(str:string)->string{
    "("+str+"/1)";
}

s2alg(s: string)->AlgExp{
    gr = "#include demos\labs_NSU\module_2\task_10\lingo.lingo";
    parsic(compilePegGrammar(gr), s, defaultPegActions);
}




reduceAlgExp(e:AlgExp)->AlgExp{
    switch(e){
        AlgSum(l,r):{
            newL = reduceAlgExp(l);
            newR = reduceAlgExp(r);

            if(newR == AlgRat(0,1)){
                newL;
            }
            else if(newL == AlgRat(0,1)){
                newR;
            }
            else{
                if(newL.structname == "AlgRat" && newR.structname == "AlgRat"){
                    sum = sumRatNum(getRat(newL), getRat(newR));
                    AlgRat(sum.num, sum.den);
                }
                else{
                   AlgSum(newL, newR); 
                }
            }
        }
        AlgSub(l,r):{
            newL = reduceAlgExp(l);
            newR = reduceAlgExp(r);

            if(newR == AlgRat(0,1)){
                newL;
            }
            else if(newL == AlgRat(0,1)){
                AlgNeg(newR);
            }
            else if(newL == newR){
                AlgRat(0,1);
            }
            else{
                if(newL.structname == "AlgRat" && newR.structname == "AlgRat"){
                    minus = sumRatNum(getRat(newL), RatNum(0 - getRat(newR).num, getRat(newR).den));
                    AlgRat(minus.num, minus.den);
                }
                else{
                   AlgSub(newL, newR); 
                }
            }
        }
        AlgMult(l,r):{
            newL = reduceAlgExp(l);
            newR = reduceAlgExp(r);

            if(newR == AlgRat(0,1)){
                AlgRat(0,1);
            }
            else if(newL == AlgRat(0,1)){
                AlgRat(0,1);
            }
            else if(newR == AlgRat(1,1)){
                newL;
            }
            else if(newL == AlgRat(1,1)){
                newR;
            }
            else if(newR == AlgRat(-1,1)){
                AlgNeg(newL);
            }
            else if(newL == AlgRat(-1,1)){
                AlgNeg(newR);
            }
            else{
                if(newL.structname == "AlgRat" && newR.structname == "AlgRat"){
                    mult = multRatNum(getRat(newL), getRat(newR));
                    AlgRat(mult.num, mult.den);
                }
                else{
                    AlgMult(newL, newR);
                }
            }
        }
        AlgDiv(l,r):{
            newL = reduceAlgExp(l);
            newR = reduceAlgExp(r);

            if(newR == AlgRat(1,1)){
                newL;
            }
            else if(newL == AlgRat(0,1) && newR != AlgRat(0,1)){
                AlgRat(0,1);
            }
            else if(newR == AlgRat(0,1)){
                AlgRat(0,0);
            }
            else{
                if(newL.structname == "AlgRat" && newR.structname == "AlgRat"){
                    div = multRatNum(getRat(newL), RatNum(getRat(newR).den, getRat(newR).num));
                    AlgRat(div.num, div.den);
                }
                else{
                    AlgDiv(newL, newR);
                }
            }
        }
        AlgNeg(v):{
            newV = reduceAlgExp(v);
            switch(newV){
                AlgNeg(v1):v1;
                AlgRat(n,d):AlgRat(0 - n, d);
                default: AlgNeg(newV);
            }
        }
        AlgVar(v):AlgVar(v);
        AlgRat(n,d):AlgRat(n,d);
    }
}


alg2RatFunc(e:AlgExp) -> RatFunc{
    switch(e){
        AlgSum(l,r):{
            sumRatFunc(alg2RatFunc(l), alg2RatFunc(r));
        }
        AlgSub(l,r):{
            sumRatFunc(alg2RatFunc(l), negRatFunc(alg2RatFunc(r)));
        }
        AlgMult(l,r):{
            multRatFunc(alg2RatFunc(l), alg2RatFunc(r));
        }
        AlgDiv(l,r):{
            divRatFunc(alg2RatFunc(l), alg2RatFunc(r));
        }
        AlgNeg(l):{
            negRatFunc(alg2RatFunc(l));
        }
        AlgVar(v):{
            RatFunc(PolySum(makeTree1(PolyMult(makeTree1(v, 1)), 1)), PolySum(makeTree1(PolyMult(TreeEmpty()), 1)));
        }
        AlgRat(n,d):{
            RatFunc(PolySum(makeTree1(PolyMult(TreeEmpty()), n)), PolySum(makeTree1(PolyMult(TreeEmpty()), d)));
        }
    }
}




reduceRatFunc(rf: RatFunc) -> RatFunc
{
    if(RatFunc2s(rf) == "0"){
        rf;
    }
    else{
        // общий множитель для числителя и знаменателя 
	    nomCom = commonFactForSum(rf.nominator);
	    denCom = commonFactForSum(rf.denominator);

        // делим числитель и знаменателб на множители
	    nomRest = dividePolySum(rf.nominator, nomCom);
	    denRest = dividePolySum(rf.denominator, denCom);

        // общий множитель множителей
	    comsCom = commonFactForFacts(nomCom, denCom);

        // делим множители на общий множитель
   	    nomComRest = dividePolySum(nomCom, comsCom);
	    denComRest = dividePolySum(denCom, comsCom);

        // остатки равны
	    if(nomRest == denRest)
	    {
		    RatFunc(nomComRest, denComRest);
	    }
	    else if(nomRest == negPolySum(denRest))
	    {
		    negRatFunc(RatFunc(nomComRest, denComRest));
	    }
	    else
	    {
		    multRatFunc(RatFunc(nomRest, denRest), RatFunc(nomComRest,denComRest))
	    }
    }
}



PolySum2s(ps:PolySum)->string{
    pairsPolySum = tree2pairs(ps.sum);

    if(length(pairsPolySum) == 0){
        "0";
    }
    else{
        foldi(pairsPolySum, "", \i, acc, v -> {
        polySumStr = acc + createReduceStr4Sum(v.second, PolyMult2s(v.first));
        if(i == length(pairsPolySum) - 1){
            polySumStr;
        }
        else{
            polySumStr + " + "
        }
        });
    }
    
}



createReduceStr4Sum(coeff : int, value : string)->string{
    if((coeff != 1) && (value != "1")){
        concatStrings([i2s(coeff), "*", value]);
    }
    else if((coeff != 1) && (value == "1")){
        concatStrings([i2s(coeff)]);
    }
    else if((coeff == 1) && (value != "1")){
        concatStrings([value]);
    }
    else{
        concatStrings([i2s(coeff)]);
    }
}


PolyMult2s(pm: PolyMult)->string{
    pairsPolyMult = tree2pairs(pm.mult);
    if(length(pairsPolyMult) == 0){
        "1";
    }
    else{
        foldi(pairsPolyMult, "", \i, acc, v -> {
            polyMultStr = acc + createReduceStr4Mult(v.first, v.second);
            if(i == length(pairsPolyMult) - 1){
                polyMultStr;
            }
            else{
                polyMultStr + "*"
            }
        })
    }
}


multPolySum(p1:PolySum, p2:PolySum)->PolySum{
    PolySum(
        filterTree(
            foldTree(p1.sum, TreeEmpty(), \k1, v1, acc1 -> {
                mergeTreeCustom(acc1,
                    foldTree(p2.sum, TreeEmpty(), \k2, v2, acc2 ->
                    {
                        multi = PolyMult(mergeTreeCustom(k1.mult, k2.mult, \kk, vv1, vv2 -> {vv1 + vv2}));
                        mergeTreeCustom(acc2, makeTree1(multi, v1 * v2), \kk, vv1, vv2 -> {vv1 + vv2});
                    }),
                    \kk, vv1, vv2 -> {vv1 + vv2}
                )
            })
            , \k,v -> {!(v == 0)}
        )
    )
}


negPolySum(p: PolySum)->PolySum{
    PolySum(
        foldTree(p.sum, TreeEmpty(), \k, v, acc ->{
            mergeTree(acc, makeTree1(k, 0 - v));
        })
    )
}

sumRatNum(r1: RatNum, r2: RatNum)->RatNum{
    lcmnum = iabs(lcm(r1.den, r2.den));

    m1 = lcmnum / r1.den;
    m2 = lcmnum / r2.den;

    new1Num = r1.num*m1;
    new2Num = r2.num*m2;
    
    newDen = r1.den*m1;

    newNum = new1Num + new2Num; 
    if(newNum == 0){
        RatNum(0, 1);
    }
    else{
        gcdnum = iabs(gcd(newNum, newDen));
        RatNum(newNum/gcdnum, newDen/gcdnum);
    }
}

getRat(e:AlgExp)->RatNum{
    switch(e){
        AlgSum(l,r):RatNum(0,0);
        AlgSub(l,r):RatNum(0,0);
        AlgMult(l,r):RatNum(0,0);
        AlgDiv(l,r):RatNum(0,0);
        AlgNeg(v):RatNum(0,0);
        AlgRat(n,d):RatNum(n,d);
        AlgVar(v):RatNum(0,0);
    }
}


createReduceStr4Mult(var:string, degree: int)->string{
    if(degree != 1){
        var + "*" + createReduceStr4Mult(var, degree-1);
    }
    else{
        var;
    }
}


multRatNum(r1: RatNum, r2: RatNum)->RatNum{
    gcd1num = iabs(gcd(r1.num,r2.den));
    gcd2num = iabs(gcd(r2.num,r1.den));

    new1Num = r1.num / gcd1num;
    new2Num = r2.num / gcd2num;

    new1Den = r1.den / gcd2num;
    new2Den = r2.den / gcd1num;

    newNum = new1Num * new2Num;
    newDen = new1Den * new2Den;
    gcdnum = iabs(gcd(newNum, newDen));
    RatNum(newNum/gcdnum, newDen/gcdnum);
}


sumPolySum(p1:PolySum, p2:PolySum)->PolySum{
    PolySum(
        filterTree(
            mergeTreeCustom(p1.sum, p2.sum, \k, v1, v2 ->{
                v1 + v2;
            }),
            \k,v -> {!(v == 0)}
        )
    )
}


similar2s(rfpod: Tree<string, int>)->string{
    pairs = tree2pairs(rfpod);

    if(length(pairs) == 0){
        "0";
    }
    else{
        foldi(pairs, "", \i, acc, v -> {
        polySumStr = acc + createReducePodobn(v.first, v.second);
        if(i == length(pairs) - 1){
            polySumStr;
        }
        else{
            polySumStr + " + "
        }
        });
    }
}


// упрощает части многочлена, разделяя положительные и отрицательные члены и суммируя их с учётом одинаковых слагаемых
similarParts(p:PolySum) -> Tree<string, int>{
    // получает члены с положительными коэффициентами
    plusValues = filterTree(p.sum, \key, value ->{
        if(value > 0){
            true;
        }else{
            false;
        }
    });

    // создаёт дерево для положительных членов, суммируя одинаковые части
    textTreePlus = foldTree(plusValues, TreeEmpty(), \k,v,acc ->{
        mergeTreeCustom(acc,
            makeTree1( PolyMult2s(k), v),
            \kk, vv1,vv2 -> {
                vv1 + vv2;
            }
        )
    });

    minusValues = filterTree(p.sum, \key, value ->{
        if(value < 0){
            true;
        }else{
            false;
        }
    });

    textTreeMinus = foldTree(minusValues, TreeEmpty(), \k,v,acc ->{
        mergeTreeCustom(acc,
            makeTree1(PolyMult2s(k), v),
            \kk,vv1,vv2 -> {
                vv1 + vv2;
            }
        )
    });

    filterTree(mergeTreeCustom(textTreePlus, textTreeMinus, \k, v1, v2 ->{
        v1 + v2;
    }), \key, value -> {value != 0});

}


commonFactForSum(p: PolySum)->PolySum
{
	PolySum(makeTree1(commonFactPolyMultForSum(p), commonFactNumForSum(p)));
}


// вычисляет общую множность всех членов многочлена
commonFactPolyMultForSum(p: PolySum) -> PolyMult 
{
	if (p.sum == TreeEmpty()) PolyMult(TreeEmpty())
	else 
	{
		firstPoly = (tree2pairs(p.sum))[0];
		polyMultTree = foldTree(firstPoly.first.mult, firstPoly.first.mult, \k, v, acc -> 
		{
			foldTree(p.sum, acc, \k1, v1, acc1 -> 
			{
				v2 = lookupTreeDef(k1.mult, k, 0);
				mergeTreeCustom(acc1, makeTree1(k, if (v2 > v) v else v2), \k2, vv1, vv2 -> 
				{
					if (vv1 > vv2) vv2
					else vv1
				})
			})
		})
		PolyMult(filterTree(polyMultTree, \k, v -> { !(v == 0)}));
	}
}


// вычисляет общий делитель всех числовых коэффициентов
commonFactNumForSum(p: PolySum) -> int
{
	if (p.sum == TreeEmpty()) 1
	else {
		foldTree(p.sum, 0, \k, v, acc -> 
		{
			if(acc == 0) iabs(v)
			else gcd(acc, iabs(v))
		})
	}
}



createReducePodobn(value: string, coeff: int)->string{
    if((coeff != 1) && (coeff != -1) && (value != "1")){
        concatStrings([i2s(coeff), "*", value]);
    }
    else if((coeff != 1) && (coeff != -1) && (value == "1")){
        concatStrings([i2s(coeff)]);
    }
    else if((coeff == 1) && (value != "1")){
        concatStrings([value]);
    }
    else if((coeff == -1) && (value != "1")){
        concatStrings(["-", value]);
    }
    else{
        concatStrings([i2s(coeff)]);
    }
}


// делим числитель на знаменатель
dividePolySum(pnum: PolySum, pden: PolySum) -> PolySum
{
    if(PolySum2s(pden) == "1"){
        pnum;
    }
    else{
        psp = (tree2pairs(pden.sum))[0];
	    denNum = psp.second;
	    denMult = psp.first.mult;

	    PolySum( foldTree(pnum.sum, TreeEmpty(), \k, v, acc -> {
			    mergeTree(acc,
				    makeTree1( PolyMult(filterTree(
						mergeTreeCustom(k.mult, denMult, \kk, vv1, vv2 -> {
							vv2 - vv1;
						    })
						    , \k1, v1 -> {!(v1 == 0)})
					    ),
					    v/denNum
				    )
			    )
		    })
	    )
    }
	
}


// вычисляет НОД числовых коэффициентов и находит общий множитель 
commonFactForFacts(p1: PolySum, p2: PolySum) -> PolySum
{
	if(p1.sum == TreeEmpty() || p2.sum == TreeEmpty()) PolySum(makeTree1(PolyMult(TreeEmpty()), 1))
	else
	{
		psp1 = (tree2pairs(p1.sum))[0];
		psp2 = (tree2pairs(p2.sum))[0];
		
		resultNum = gcd(psp1.second, psp2.second);

		resultMult = foldTree(psp1.first.mult, psp1.first.mult, \k, v, acc -> 
		{
			v2 = lookupTreeDef(psp2.first.mult, k, 0);
			mergeTreeCustom(acc, makeTree1(k, if(v2 > v) v else v2), \kk, vv1, vv2 -> 
			{
				if(vv1 > vv2) vv2 else vv1
			})
		})
		
		PolySum(makeTree1(PolyMult(filterTree(resultMult, \k, v -> {!(v == 0)})), resultNum));
	}
}




sumRatFunc(f1:RatFunc, f2:RatFunc)->RatFunc{
    nom1 = multPolySum(f1.nominator, f2.denominator);
    nom2 = multPolySum(f2.nominator, f1.denominator);
    den = multPolySum(f1.denominator, f2.denominator);
    RatFunc(sumPolySum(nom1, nom2), den);
}

negRatFunc(f1:RatFunc)->RatFunc{
    RatFunc(negPolySum(f1.nominator), f1.denominator);
}

multRatFunc(f1:RatFunc, f2:RatFunc)->RatFunc{
    RatFunc(multPolySum(f1.nominator, f2.nominator), multPolySum(f1.denominator, f2.denominator));
}

divRatFunc(f1: RatFunc, f2:RatFunc)->RatFunc{
    multRatFunc(f1, RatFunc(f2.denominator, f2.nominator));
}


RatFunc2s(rf: RatFunc)->string{
    if(PolySum2s(rf.denominator) == "1"){
        PolySum2s(rf.nominator);
    }
    else{
        PolySum2s(rf.nominator) 
        + "\n---------------------\n" 
        + PolySum2s(rf.denominator);
    }
}


similarParts2s(rf:RatFunc)->string{
    if(PolySum2s(rf.denominator) == "1"){
        similar2s(similarParts(rf.nominator));
    }
    else{
        similar2s(similarParts(rf.nominator))
        + "\n---------------------\n" 
        + similar2s(similarParts(rf.denominator));
    }
}

executeStr(getStr : string){
    str = convertStr(getStr);
    expr = s2alg(str);
    reduceExpr = reduceAlgExp(expr);

    ratFunc = alg2RatFunc(reduceExpr); 
    reduceRatFunc = reduceRatFunc(ratFunc);            
    println("Simplify differ: " + similarParts2s(reduceRatFunc) + "\n");
    
}



main() {

    inputData: [string] = [
        "(5*x)",
        "(5*y)",
        "(5*(x*x))",
        "((5*x)*x)",
        "((((2*x)-3)*((2*x)-3))-((2*x)*(4+(2*x))))"
    ] ;

    fori(0, length(inputData) - 1, \i -> 
    {
        println("\n\ninput: " + inputData[i]);
        println("ast tree: ");
        excep = s2ar(inputData[i]);
        println(excep);
        
        println(ar2s(diff(excep, "x")));
        println("differ: ");
        dif_excep = ar2s(simplify(diff(excep, "x")));
        println(dif_excep);
        executeStr(dif_excep);

    });


    quit(0);
}