// тот же калькулятор как в 8 таске, но + операции деления, степени и умножение и вещественные числа
// и без чтения из консоли





exp = ws sum:e ws {:e};

sum = div:e1 ws '+' ws sum:e2 {Add(:e1,:e2)} | div:e {:e};
div = sub:e1 ws ':' ws div:e2 {Div(:e1,:e2)} | sub:e {:e};
sub = mul:e1 ws '-' ws sub:e2 {Sub(:e1,:e2)} | mul:e {:e};
mul = digitReader:e1 ws '*' ws mul:e2 {Mul(:e1,:e2)} | digitReader:e {:e};
digitReader = int:e {:e} | '(' exp:e ')' {:e}; 


int = digit+$d { Int(s2i($d)) };

digit = '0'-'9';
ws = s*;
s = " " | "\t" | "\n";













import lib/runtime;
import lib/lingo/pegcode/driver;
import lib/string;
import lib/math/math;

//flow structures defined like this in a flow file
Exp ::= Add, Sub, Mul, Div, Int;
    Add : (e1 : Exp, e2 : Exp);
    Sub : (e1 : Exp, e2 : Exp);
    Mul : (e1 : Exp, e2 : Exp);     // '-'
    Div : (e1 : Exp, e2 : Exp);     // ':'
    Int : (e : int);


getValue(e: Exp) -> int {
    switch(e) {
        Add(e1, e2): getValue(e1) + getValue(e2);
        Sub(e1, e2): getValue(e1) - getValue(e2);
        Mul(e1, e2): getValue(e1) * getValue(e2);
        Div(e1, e2): getValue(e1) / getValue(e2);
        Int(i): i;
    }
}


convertTreeToString(syntaxTree : flow) -> string {
    switch(syntaxTree) {
        Add(e1, e2): "(" + convertTreeToString(e1) + "+" + convertTreeToString(e2) + ")";
        Sub(e1, e2): "(" + convertTreeToString(e1) + "-" + convertTreeToString(e2) + ")";
        Mul(e1, e2): "(" + convertTreeToString(e1) + "*" + convertTreeToString(e2) + ")";
        Div(e1, e2): "(" + convertTreeToString(e1) + "/" + convertTreeToString(e2) + ")";
        Int(i): i2s(i);
    }
}



grammar = compilePegGrammar("#include C:\Users\kulma\gitRepository\newTryFlow\flow9\demos\labs_NSU\module_2\task_9\lingo\arithmetic.lingo");

main() {

     inputData: [Pair<string, int>] = [ 
        Pair(" 1 + 2 ", 3),
        Pair(" 1 + 2 + 3 ", 6),
        Pair(" ( 1 + 2 ) ", 3),
        Pair(" ( 1 + 2 ) + 3 ", 6),
        Pair(" 1 * 2 ", 2),
        Pair(" 1 * 2 * 3 ", 6),
        Pair(" 1 * 2 + 3 * 4 ", 14),
        Pair(" ( 1 + 2 * 4 ) ", 9),
        Pair(" ( 1 + 2 ) * 3 ", 9),
        Pair(" ( 1 * 2 ) + 3 ", 5),
        Pair(" 1 - 2 ", -1),
        Pair(" 1 + 2 - 3 ", 0),
        Pair(" ( 1 - 2 ) ", -1),
        Pair(" ( 1 - 2 ) - 3 ", -4),
        Pair(" 1 * 2 ", 2),
        Pair(" 1 * 2 - 3 ", -1),
        Pair(" 1 * 2 - 3 * 4 ", -10),
        Pair(" ( 1 - 2 * 4 ) ", -7),
        Pair(" ( 1 - 2 ) * 3 ", -3),
        Pair(" ( 1 * 2 ) - 3 ", -1),
        Pair(" 4 : 2 ", 2),
        Pair(" ( 8 : 1 ) ", 8)
        ];

    inputData2: [Pair<string, double>] = [
        Pair(" 2 : 4 ", 0.5),
        Pair(" ( 1 : 8 ) ", 0.125)
    ] ;
   
   
    cntAllTests = ref length(inputData);
    cntCorrectTests = ref 0;
    fori(0, length(inputData) - 1, \i -> { 
        syntaxTree : flow = parsic(grammar, inputData[i].first, defaultPegActions);
        println("syntax Tree after parsic():" );
        println(syntaxTree);
        println("syntax Tree after convert to string:" );
        println(convertTreeToString(syntaxTree));
        resultValue = getValue(syntaxTree);
        println(inputData[i].first + " = " + i2s(resultValue) + 
                    "    ---    Correct result: " + i2s(inputData[i].second) + "\n");
        if (resultValue == inputData[i].second)
            cntCorrectTests := ^cntCorrectTests + 1;

    });

    //for division
    
    cntAllTests := ^cntAllTests + length(inputData2);
    fori(0, length(inputData2) - 1, \i -> { 
        syntaxTree : flow = parsic(grammar, inputData2[i].first, defaultPegActions);
        println("syntax Tree after parsic():" );
        println(syntaxTree);
        println("syntax Tree after convert to string:" );
        println(convertTreeToString(syntaxTree));
        resultValue = getValue(syntaxTree);
        println(inputData2[i].first + " = " + i2s(resultValue) + 
                    "    ---    Correct result: " + d2s(inputData2[i].second) + "\n");
        if (i2d(resultValue) == inputData2[i].second)
            cntCorrectTests := ^cntCorrectTests + 1;

    });

    println("\n\n All tests: " + i2s(^cntAllTests));
    println("Correct tests: " + i2s(^cntCorrectTests));
    println("Incorrect tests: " + i2s(^cntAllTests - ^cntCorrectTests));

}