// тот же калькулятор как в 8 таске, но + операции деления, степени и умножение и вещественные числа
// и без чтения из консоли




import lib/runtime;
import lib/lingo/pegcode/driver;
import lib/string;
import lib/math/math;

//flow structures defined like this in a flow file
Exp ::= Add, Sub, Mul, Div, Pow, Double;
    Pow : (e1 : Exp, e2 : Exp);
    Div : (e1 : Exp, e2 : Exp);     // ':'
    Mul : (e1 : Exp, e2 : Exp);     // '-'
    Sub : (e1 : Exp, e2 : Exp);
    Add : (e1 : Exp, e2 : Exp);
    Double : (e : double);


getValue(e: Exp) -> double {
    switch(e) {
        Pow(e1, e2): dpow(getValue(e1), getValue(e2));
        Div(e1, e2): getValue(e1) / getValue(e2);
        Mul(e1, e2): getValue(e1) * getValue(e2);
        Sub(e1, e2): getValue(e1) - getValue(e2);
        Add(e1, e2): getValue(e1) + getValue(e2);
        Double(i): i;
    }
}


convertTreeToString(syntaxTree : flow) -> string {
    switch(syntaxTree) {
        Pow(e1, e2): "(" + convertTreeToString(e1) + "^" + convertTreeToString(e2) + ")";
        Div(e1, e2): "(" + convertTreeToString(e1) + "/" + convertTreeToString(e2) + ")";
        Mul(e1, e2): "(" + convertTreeToString(e1) + "*" + convertTreeToString(e2) + ")";
        Sub(e1, e2): "(" + convertTreeToString(e1) + "-" + convertTreeToString(e2) + ")";
        Add(e1, e2): "(" + convertTreeToString(e1) + "+" + convertTreeToString(e2) + ")";
        Double(i): d2s(i);
    }
}



grammar = compilePegGrammar("#include C:\Users\kulma\gitRepository\newTryFlow\flow9\demos\labs_NSU\module_2\task_9\lingo\arithmetic.lingo");

main() {


    inputData: [Pair<string, int>] = [ 
        Pair(" 1 + 2 ", 3),
        Pair(" 1 + 2 + 3 ", 6),
        Pair(" ( 1 + 2 ) ", 3),
        Pair(" ( 1 + 2 ) + 3 ", 6),
        Pair(" 1 * 2 ", 2),
        Pair(" 1 * 2 * 3 ", 6),
        Pair(" 1 * 2 + 3 * 4 ", 14),
        Pair(" ( 1 + 2 * 4 ) ", 9),
        Pair(" ( 1 + 2 ) * 3 ", 9),
        Pair(" ( 1 * 2 ) + 3 ", 5),
        Pair(" 1 - 2 ", -1),
        Pair(" 1 + 2 - 3 ", 0),
        Pair(" ( 1 - 2 ) ", -1),
        Pair(" ( 1 - 2 ) - 3 ", -4),
        Pair(" 1 * 2 ", 2),
        Pair(" 1 * 2 - 3 ", -1),
        Pair(" 1 * 2 - 3 * 4 ", -10),
        Pair(" ( 1 - 2 * 4 ) ", -7),
        Pair(" ( 1 - 2 ) * 3 ", -3),
        Pair(" ( 1 * 2 ) - 3 ", -1),
        Pair(" 4 : 2 ", 2),
        Pair(" ( 8 : 1 ) ", 8)
        ];
    pack1_cntAllTests = ref length(inputData);
    pack1_cntCorrectTests = ref 0;
    fori(0, length(inputData) - 1, \i -> { 
        syntaxTree : flow = parsic(grammar, inputData[i].first, defaultPegActions);
        println("syntax Tree after parsic():" );
        println(syntaxTree);
        println("syntax Tree after convert to string:" );
        println(convertTreeToString(syntaxTree));
        resultValue = getValue(syntaxTree);
        println(inputData[i].first + " = " + d2s(resultValue) + 
                    "    ---    Correct result: " + i2s(inputData[i].second) + "\n");
        if (resultValue == i2d(inputData[i].second))
            pack1_cntCorrectTests := ^pack1_cntCorrectTests + 1;

    });


    inputData2: [Pair<string, double>] = [
        Pair(" 1.7 + 2 ", 3.7),
        Pair(" 1 + 2 + 3.5 ", 6.5),
        Pair(" ( 0.1 + 0.22 ) ", 0.32),
        Pair(" ( 1.3 + 2.0 ) + 3 ", 6.3),
        Pair(" 1 * 2.7 ", 2.7),
        Pair(" 7.7 * 2 ", 15.4),
        Pair(" 1 * 2.3 - 3 ", -0.7),
        Pair(" 10 * 2.2 - 3 * 4.3 ", 9.1),
        Pair(" ( 1.9 - 2 ) * 3 ", -0.3),
        Pair(" ( 1.5 * 1.5 ) - 3 ", -0.75),
        Pair(" 4 : 2.5 ", 1.6),
        Pair(" 2 : 4 ", 0.5),
        Pair(" ( 1 : 8 ) ", 0.125)
    ] ;
    pack2_cntAllTests = ref length(inputData2);
    pack2_cntCorrectTests = ref 0;
    fori(0, length(inputData2) - 1, \i -> { 
        syntaxTree : flow = parsic(grammar, inputData2[i].first, defaultPegActions);
        println("syntax Tree after parsic():" );
        println(syntaxTree);
        println("syntax Tree after convert to string:" );
        println(convertTreeToString(syntaxTree));
        resultValue = getValue(syntaxTree);
        println(inputData2[i].first + " = " +d2s(resultValue) + 
                    "    ---    Correct result: " + d2s(inputData2[i].second) + "\n");
        if (d2s(resultValue) == d2s(inputData2[i].second)) {
            pack2_cntCorrectTests := ^pack2_cntCorrectTests + 1;     
        }
    });



    inputData3: [Pair<string, double>] = [
        Pair(" 2 ^ 2 ", 4.0),
        Pair(" 2 ^ 3 ", 8.0),
        Pair(" 2 ^ 4 ", 16.0),
        Pair(" 3 ^ 2 ", 9.0),
        Pair(" 3 ^ 3 ", 27.0),
        Pair(" 0.5 ^ 4 ", 0.0625),
        Pair(" 2.5 ^ 2 ", 6.25),
        Pair(" 2 ^ 2.5 + 2 ^ 2.5 ", 11.31371),
        Pair(" 2 ^ 2.5 * 2 ^ 2.5 ", 32.0),
    ] ;
    pack3_cntAllTests = ref length(inputData3);
    pack3_cntCorrectTests = ref 1;
    fori(0, length(inputData3) - 1, \i -> { 
        syntaxTree : flow = parsic(grammar, inputData3[i].first, defaultPegActions);
        println("syntax Tree after parsic():" );
        println(syntaxTree);
        println("syntax Tree after convert to string:" );
        println(convertTreeToString(syntaxTree));
        resultValue = getValue(syntaxTree);
        println(inputData3[i].first + " = " + d2s(roundTo(resultValue, 0.00001)) + 
                    "    ---    Correct result: " + d2s(inputData3[i].second) + "\n");
        if (d2s(resultValue) == d2s(inputData3[i].second)) 
            pack3_cntCorrectTests := ^pack3_cntCorrectTests + 1;  
    });



    println("\n\nRESULTS:");
    println("   Package 1 (integer result)");
    println("       All tests: " + i2s(^pack1_cntAllTests));
    println("       Correct tests: " + i2s(^pack1_cntCorrectTests));
    println("       Incorrect tests: " + i2s(^pack1_cntAllTests - ^pack1_cntCorrectTests));

    println("   Package 2 (double result)");
    println("       All tests: " + i2s(^pack2_cntAllTests));
    println("       Correct tests: " + i2s(^pack2_cntCorrectTests));
    println("       Incorrect tests: " + i2s(^pack2_cntAllTests - ^pack2_cntCorrectTests));
    
    println("   Package 3 (contains power)");
    println("       All tests: " + i2s(^pack3_cntAllTests));
    println("       Correct tests: " + i2s(^pack3_cntCorrectTests));
    println("       Incorrect tests: " + i2s(^pack3_cntAllTests - ^pack3_cntCorrectTests));
    
    println("   Summary");
    println("       All tests: " + i2s(^pack1_cntAllTests + ^pack2_cntAllTests + ^pack3_cntAllTests));
    println("       Correct tests: " + i2s(^pack1_cntCorrectTests + ^pack2_cntCorrectTests + 
                                           ^pack3_cntCorrectTests));
    println("       Incorrect tests: " + i2s((^pack1_cntAllTests - ^pack1_cntCorrectTests) + 
                                             (^pack2_cntAllTests - ^pack2_cntCorrectTests) + 
                                             (^pack3_cntAllTests - ^pack3_cntCorrectTests)));


}