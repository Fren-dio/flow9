import fabric/fabric;

export {
	fabricUndo(name : string) -> Fabric;
}

fabricUndo(valueName : string) -> Fabric {
	undoStack = valueName + "Undo";
	undoEnabled = valueName + "undoenabled";
	redoStack = valueName + "Redo";
	redoEnabled = valueName + "redoenabled";
	currentBuffer = valueName + "undocurrent";
	working = valueName + "undoworking";

	BLetMany([
			flow(currentBuffer), 123456, 
			undoStack, [], 
			redoStack, [], 
			undoEnabled, false, 
			redoEnabled, false, 
			working, false
		],
		BGetEnv(\benv -> {
			BGroup([
				BSelect1(valueName, \env, value -> {
					if (!getFabricValueRequired(env, working, false)) {
						currentValue = getFabricValueRequired(env, currentBuffer, 123456);
						newValue = getFabricValueRequired(env, valueName, 123456);

						if (currentValue == 123456) {
							nextFabricValue(env, currentBuffer, newValue);
						} else if (currentValue != newValue) {
							stack = getFabricValueRequired(env, undoStack, []);
							nextFabricValue(env, undoStack, concat([currentValue], stack));
							nextFabricValue(env, redoStack, []);
							nextFabricValue(env, currentBuffer, newValue);
							nextFabricValue(env, undoEnabled, true);
							nextFabricValue(env, redoEnabled, false);
						}
					}
					BEmpty();
				}),

				BCols([
					BIconButton("undo", \env -> {
						values = getFabricValueRequired(env, undoStack, []);
						if (length(values) > 0) {
							nextFabricValue(env, working, true);
							currentValue = getFabricValueRequired(env, currentBuffer, 123456);
							nextFabricValue(env, redoStack, concat([currentValue], getFabricValueRequired(env, redoStack, [])));
							nextFabricValue(env, currentBuffer, values[0]);
							nextFabricValue(env, valueName, values[0]);
							nextFabricValue(env, undoStack, tail(values));
							nextFabricValue(env, working, false);
							nextFabricValue(env, undoEnabled, length(values) > 1);
							nextFabricValue(env, redoEnabled, true);
						}
					}, [], [MEnabled(getFabricDynamicValueRequired(benv, undoEnabled, true))]),
					BIconButton("redo", \env -> {
						redoValues = getFabricValueRequired(env, redoStack, []);
						if (length(redoValues) > 0) {
							nextFabricValue(env, working, true);
							currentValue = getFabricValueRequired(env, currentBuffer, 123456);
							nextFabricValue(env, undoStack, concat([currentValue], getFabricValueRequired(env, undoStack, [])));
							nextFabricValue(env, currentBuffer, redoValues[0]);
							nextFabricValue(env, valueName, redoValues[0]);
							nextFabricValue(env, redoStack, tail(redoValues));
							nextFabricValue(env, working, false);
							nextFabricValue(env, redoEnabled, length(redoValues) > 1);
							nextFabricValue(env, undoEnabled, true);
						}
					}, [], [MEnabled(getFabricDynamicValueRequired(benv, redoEnabled, true))])
				])
			])
		})
	);
}



/*
export function clipboard(valueName: string): Fabric {
	const currentBuffer = valueName + "Clipboard";
	const cutVisible = valueName + "cutvisible";
	const cutEnabled = valueName + "cutenabled";
	const copyEnabled = valueName + "copyenabled";

	return define(currentBuffer, null,
		define(cutVisible, false,
			define(cutEnabled, false,
				define(copyEnabled, true,
					cols([
						select([valueName], (env) => {
							setValue(env, copyEnabled, true);
							const currentValue = getValue(env, valueName);
							setValue(env, cutVisible, Array.isArray(currentValue));
							setValue(env, cutEnabled, Array.isArray(currentValue) && currentValue.length > 0);
							return empty();
						}),
						select([cutVisible], (env) => {
							if (getValue(env, cutVisible)) {
								return button({ icon: "content_cut", enable: cutEnabled }, (env) => {
									const cvalue = getValue(env, valueName);
									setValue(env, currentBuffer, cvalue);
									navigator.clipboard.writeText(JSON.stringify(cvalue));
									setValue(env, valueName, []);
								});
							} else {
								return empty();
							}
						}),
						button({ icon: "content_copy", enable: copyEnabled }, (env) => {
							const cvalue = getValue(env, valueName);
							setValue(env, currentBuffer, cvalue);
							navigator.clipboard.writeText(JSON.stringify(cvalue));
							setValue(env, copyEnabled, false);
						}),
						button({ icon: "content_paste" }, (env) => {
							navigator.clipboard.readText().then(text => {
								try {
									const value = JSON.parse(text);
									setValue(env, valueName, value);
								} catch (e) {
									console.error("Failed to parse clipboard content:", e);
									setValue(env, valueName, getValue(env, currentBuffer));
								}
							});
						})
					])
				)
			)
		)
	);
}*/