import material/material;

export {
	Fabric ::= BLet, BCapture, BSelect, BContainer, BTable, BMaterial;

	BLet(name : string, value : flow, scope : Fabric);
	BCapture(name : string, value : flow, scope : Fabric);
	BSelect(names : [string], fn : (FabricEnv, values : [flow]) -> Fabric);
	BContainer(items : [Fabric], style : BContainerStyle);
		BContainerStyle(autoRtl : bool, downwards : bool, group : bool);
	BTable(rows : [[Fabric]], style : BTableStyle);
		BTableStyle();
	BMaterial(material : Material);

	FabricEnv(parent : Maybe<FabricEnv>, values : Tree<string, DynamicBehaviour<flow>>);

	getFabricValue(env : FabricEnv, name : string) -> Maybe<flow>;
	getFabricBoolValue(env : FabricEnv, name : string) -> Maybe<bool>;
	getFabricIntValue(env : FabricEnv, name : string) -> Maybe<int>;

	nextFabricValue(env : FabricEnv, name : string, value : flow) -> void;
}

getFabricDynamicValue(env : FabricEnv, name : string) -> Maybe<DynamicBehaviour<flow>> {
	mvalue = lookupTree(env.values, name);
	mvalue ?? {
		Some(mvalue);
	} : {
		switch (env.parent) {
			None(): None();
			Some(p): getFabricDynamicValue(p, name);
		}
	}
}

getFabricValue(env : FabricEnv, name : string) -> Maybe<flow> {
	mvalue = getFabricDynamicValue(env, name);
	mvalue ?? {
		Some(getValue(mvalue));
	} : mvalue
}

getFabricBoolValue(env : FabricEnv, name : string) -> Maybe<bool> {
	mvalue = getFabricValue(env, name);
	mvalue ?? {
		value = getValue(mvalue);
		if (value == true || value == false) Some(value)
		else {
			None();
		}
	} : mvalue;
}

getFabricIntValue(env : FabricEnv, name : string) -> Maybe<int> {
	mvalue = getFabricValue(env, name);
	mvalue ?? {
		value = getValue(mvalue);
		// TODO: Check that this is an int somehow
		Some(value);
	} : mvalue;
}

nextFabricValue(env : FabricEnv, name : string, value : flow) -> void {
	mvalue = getFabricDynamicValue(env, name);
	switch (mvalue) {
		None(): {
			println("Error: Unknown value to next: " + name);
		}
		Some(v): {
			nextDistinct(v, value);
		}
	}
}
