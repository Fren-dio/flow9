import fabric/env;

export {
	fabric2material(env : FabricEnv, f : Fabric) -> Material;
}

fabric2material(env : FabricEnv, f : Fabric) -> Material {
	todo = \ -> {
		println("TODO: Convert " + ellipsis(toString(f), 100) + " to Material");
		MText("TODO", [])
	}
	switch (f) {
		BLet(name, value, scope): {
			dyn = make(value);
			if (containsKeyTree(^(env.values), name)) {
				// Shadowing, and we make a new environment
				nenv = innerFabricEnv(env);
				setFabricValue(nenv, name, dyn);
				fabric2material(nenv, scope);
			} else {
				setFabricValue(env, name, dyn);
				fabric2material(env, scope);
			}
		}
		BCapture(name, value, scope): {
			dyn = captureFabricValue(env, name, value);
			fabric2material(env, scope);
		}
		BSelect(names, fn): {
			values = filtermap(names, \name -> getFabricDynamicValue(env, name));
			if (length(values) != length(names)) {
				missing = filter(names, \name -> !containsKeyTree(^(env.values), name));
				println("Error: Unknown values in BSelect " + toString(missing));
			}
			MSelect(fmerge(values), \vals -> {
				fabric = fn(env, vals);
				fabric2material(env, fabric);
			})
		}
		BBidirectional(a, b, a2b, b2a): {
			ma = getFabricDynamicValue(env, a);
			mb = getFabricDynamicValue(env, b);
			switch (ma) {
				None(): {
					println("Error: Unknown value for " + a);
					MText("Error", [])
				}
				Some(da): {
					switch (mb) {
						None(): {
							println("Error: Unknown value for " + b);
							MText("Error", [])
						}
						Some(db): {
							MConstruct([
								\ -> {
									bidirectionalLink(da, db, a2b, b2a)
								},
							], MEmpty())
						}
					}
				}
			}
		}
		BContainer(items, style): {
			mitems = map(items, \t -> fabric2material(env, t));
			if (style.downwards) {
				MLines(mitems)
			} else if (style.group) {
				MGroup(mitems)
			} else if (style.baseline) {
				MBaselineCols(mitems)
			} else {
				MCols(mitems);
			}
		}
		BTable(rows): todo();
		BMaterial(material): material;
		BGetEnv(fn): {
			fabric = fn(env);
			fabric2material(env, fabric);
		}
	}
}
