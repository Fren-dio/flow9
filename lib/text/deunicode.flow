import maybe;
import string_utils;
import ds/tree;
import text/unicodecharacters;

export {
	deunicode(s : string) -> string;
}

deunicodeSubstitutions : ref Maybe<Tree<string, string>> = ref None();

deunicode(s : string) -> string {
	substitutions = onlyOnce(deunicodeSubstitutions, \ -> {
		common = [
			"æ", "ae", "ø", "oe", "å", "aa", 
			"é", "e", "è", "e", "ê", "e", "ë", "e",
			"á", "a", "à", "a", "â", "a", "ä", "a",
			"í", "i", "ì", "i", "î", "i", "ï", "i",
			"ó", "o", "ò", "o", "ô", "o", "ö", "o",
			"ú", "u", "ù", "u", "û", "u", "ü", "u",
			"ñ", "n", "ç", "c",
			"š", "s", "č", "c", "ž", "z", 
			"đ", "dj", 
			"ğ", "g", "ş", "s", 
			"ý", "y", "ÿ", "y", 
			"ð", "d", "þ", "th", 
			"ƒ", "f",
			"ł", "l", "ń", "n", "ŕ", "r",
			"ť", "t", "ů", "u", 
			"ã", "a", "õ", "o", "ẽ", "e", "ũ", "u", 
			"ą", "a", "ę", "e", "ź", "z", "ż", "z",
			"ő", "o", "ű", "u",
			"ė", "e", "į", "i", "ų", "u",
			"ć", "c", "ț", "t", "ș", "s",
			"ı", "i",
		];

		lower = [
			"ß", "ss", "œ", "oe", "ĳ", "ij"
		];

		upper = [
			"Œ", "OE", "Ĳ", "IJ",
			"İ", "I",
		];
		replacements = concatA([common, map(common, toUppercaseUnicode), lower, upper]);
		foldi(replacements, makeTree(), \i, acc, from -> {
			if (i % 2 == 0) {
				if (containsKeyTree(acc, from)) {
					println("Duplicate " + from);
				}
				setTree(acc, from, replacements[i + 1])
			} else acc;
		})
	});

	list2string(stringFoldChar(s, makeList(), \acc, c -> {
		Cons(
			lookupTreeDef(substitutions, c, c),
			acc
		)
	}))
}

/*
main() {
	println(deunicode("This is nice: æøå ÆØÅ ß"));
	quit(0);
}*/