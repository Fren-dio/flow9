import text/gringo/gringo_typed_action;

import tools/gringo/gringo_grammar;
import tools/gringo/gringo_ast_actions;
import tools/gringo/gringo_prepare;

export {
	// Given a grammar, prepare it to be used for the interpretative parse
	prepareGringoParser(grammar : string, onError : (string) -> void) -> GTerm;

	// Parse a text. This corresponds to gringoTypedParse from `gringo_typed_action`
	gringoInterpretedParse(
		// The text to parse
		text : string, 
		// The actions - make this with gringoTypedAction
		action : GringoAction<List<?>>, 
		// The grammar as a GTerm
		grammar : GTerm,
		// A default value in case parsing fail
		defaultVal : ?,
		// For parse errors
		onError : (string) -> void,
	) -> ?;
}

prepareGringoParser(grammar : string, onError : (string) -> void) -> GTerm {
	ggrammar = gringoGrammar();
	genv = GringoEnv(grammar, makeTree(), gringoAstAction, makeList(), makeTree(), 0, false, 0);
	env = gringoParse(genv, gringoGrammar());
	gringoEndGame(grammar, !env.fail, env.i, env.output, env.errors, GEpsilon(), onError);
}

gringoInterpretedParse(
		// The text to parse
		text : string, 
		// The actions - make this with gringoTypedAction
		action : GringoAction<List<?>>, 
		// The grammar as a GTerm
		grammar : GTerm,
		// A default value in case parsing fail
		defaultVal : ?,
		// For parse errors
		onError : (string) -> void,
	) -> ? {
	genv : GringoEnv<List<?>> = GringoEnv(text, makeTree(), action, makeList(), makeTree(), 0, false, 0);
	env = gringoParse(genv, grammar);

	gringoEndGame(text, !env.fail, env.i, env.output, env.errors, defaultVal, onError);
}
