import formats/wasm/wasm_encode;

import sys/system;

main() {
	module = WasmModule(
		[], [
			WasmTypeSection([WasmFuncType([], [WasmI32Type()])])
		], // types
		[], [], // imports
		[], [
			WasmFunctionSection([0]) // Reference to type 0
		], // functions
		[], [
			WasmTableSection([
				WasmTableType(
					WasmFuncRef(),
					WasmLimits(0, 0)
				)
			])
		], // tables
		[], [
			WasmMemorySection([
				WasmMemoryType(WasmLimits(1, 0))
			])
		], // memories
		[], [], // globals
		[], [
			WasmExportSection([
				WasmExport("memory", WasmExportMemory(0)),
				WasmExport("main", WasmExportFunc(0)),
			])
		], // exports
		[], [], // starts
		[], [], // elements
		[], [], // datacounts
		[WasmCustomSection("code", [])], [
			WasmCodeSection([
				WasmCode([
						WasmLocal(1, WasmI32Type())
					], 	
					WasmExpr([
						WasmI32Const(0),
						WasmI32Load(WasmMemArg(2, 4)),
						WasmI32Const(16),
						WasmI32Sub(),
						WasmLocalTee(0),
						WasmI32Const(0),
						WasmI32Store(WasmMemArg(2, 12)),
						WasmLocalGet(0),
						WasmI32Const(0),
						WasmI32Store(WasmMemArg(2, 8)),
						WasmBlock(WasmEmptyType(), [
							WasmLoop(WasmEmptyType(), [
								WasmLocalGet(0),
								WasmI32Load(WasmMemArg(2, 8)),
								WasmI32Const(9),
								WasmI32Gt_s(),
								WasmBrIf(1),
								WasmLocalGet(0),
								WasmLocalGet(0),
								WasmI32Load(WasmMemArg(2, 8)),
								WasmI32Const(1),
								WasmI32Add(),
								WasmI32Store(WasmMemArg(2, 8)),
								WasmBr(0)
							])
						]),
						WasmLocalGet(0),
						WasmI32Load(WasmMemArg(2, 8)),
					])
				)
			])
		], // codes
		[], [], // data
		[]
	);

	bytes = wasmModule2bytes(module);
	
	setFileContentBytes("test.wasm", 
		fold(bytes, "", \acc, byte -> {
			acc + fromCharCode(byte)
		})
	);

	startProcess("wasm2wat", ["test.wasm", "-o", "test.wat"], ".", "", \ec, so, se -> {
		println(ec);
		println(so);
		println(se);
		quit(0);
	});
}
