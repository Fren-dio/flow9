
/*
WasmModule(
	types : [WasmFuncType],
	imports : [WasmImport],
	funcs : [WasmFunction],
	table : [WasmTable],
	memory : WasmMemory,
	global : [WasmGlobal],
	exports : [WasmExport],
	data : [WasmData]
);
*/
// https://webassembly.github.io/spec/core/binary/modules.html
WasmSection(
	id : int, // byte. 0 custom, 1 type, 2 import, 3 function, 4 table, 5 memory, 6 global, 7 export, 8 start, 9 element, 10 code, 11 data, 12 data count
	size : int, // in bytes
	contents : [int] // bytes
);

/*

WasmCustomSection(
	name : string,
	bytes : [int]
);


WasmImport(jsmodule : string, jsfunction : string, wasmname : string, parameters : [Type], returns : Type);
WasmMemory(jsmodule : string, jsfunction : string, pages : int);

WasmData();

WasmGlobal(name : string, jsmodule : string, jsfunction : string, mutable_ : bool, type : WasmValType);

WasmFunction(name : string, exported : bool, parameters : [Type], returns : Type, body : [Instruction]);
*/

//
// Values
//

WasmI32(val : int);
WasmI64(low : int, high : int);

WasmF32(val : int);
WasmF64(val : double);

WasmName(name : string);

//
// Types
//
WasmValType ::= WasmNumType, WasmVecType, WasmRefType;

	WasmNumType ::= WasmI32Type, WasmI64Type, WasmF32Type, WasmF64Type;
		WasmI32Type(); // 0x7f
		WasmI64Type(); // 0x7e
		WasmF32Type(); // 0x7d
		WasmF64Type(); // 0x7c

	// v128
	WasmVecType();  // 0x7b

	WasmRefType ::= WasmFuncRef, WasmExternRef;

		WasmFuncRef();   // 0x70
		WasmExternRef(); // 0x6f

// 0x70 #bytes(params) params #bytes(returns) returns
WasmFuncType(
	params : [WasmValType],
	returns : [WasmValType],
);

// Other types
WasmLimits(minimum : int, maximum : int); // If max is 0, then it is missing

WasmMemoryType(limits : WasmLimits);

WasmTableType(
	reftype : WasmRefType,
	limits : WasmLimits,
);

WasmGlobalType(
	type : WasmValType,
	ismutable : bool
);

/*
Loop(
	label : string,
	resultType : Type,
	instructions : [Instruction]
);

Instruction(
	id : string,
	object : Type,
	args : [Expression],
	namedArgs : Maybe<Object>
);

IfInstruction(
	condition : Instruction,
	then : Instruction,
	else_ : Instruction
);

Block(label : string, parameters : [Type], returns : Type, instructions : [Instruction]);

	Wasm2Cmd ::= Wasm2Seq, Wasm2Code, Wasm2I32Const, Wasm2F64Const, Wasm2Drop, 
				 Wasm2Void, Wasm2If, Wasm2Call, Wasm2SetLocal, Wasm2SetLocalI, 
				 Wasm2GetLocal, Wasm2SetGlobal, Wasm2GetGlobal, Wasm2Br;

		Wasm2Seq(commands : [Wasm2Cmd]);

		Wasm2If(cond : Wasm2Cmd, isVoid : bool, f64 : bool, thenBranch : Wasm2Cmd, elseBranch : Wasm2Cmd);

		Wasm2I32Const(i : int);
		Wasm2F64Const(d : double);

		Wasm2Drop();
		Wasm2Void();

		Wasm2GetLocal(name : string);
		Wasm2SetLocal(name : string);
		Wasm2SetLocalI(idx : int);

		Wasm2SetGlobal(name : string);
		Wasm2GetGlobal(name : string);

		Wasm2Call(name : string);
		Wasm2Br(dst : string);
*/
