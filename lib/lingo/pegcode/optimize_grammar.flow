import lib/lingo/peg;

export {
	// Transforms "a = b c | b d;" to "a = b (c | d)"
	optimizeGrammar(g : Grammar) -> Grammar;
}

optimizeGrammar(g : Grammar) -> Grammar {
	Grammar(map(g.productions, optimizeProduction));
}

optimizeProduction(p : Production) -> Production {
	choices = fold(p.choices, [], \acc : [Seq], c : Seq -> {
		n = length(acc);
		if (n == 0) {
			[c];
		} else {
			last = acc[n - 1].seq;
			nl = length(last);
			// If choices have the same prefix, we "outline" them
			firstDiff = iteriUntil(c.seq, \i, e -> !(i < nl && last[i] == e));
			if (firstDiff > 0) {
				shared = subrange(c.seq, 0, firstDiff);

				tail1 = subrange(last, firstDiff, nl - firstDiff);
				nc = length(c.seq);
				tail2 = subrange(c.seq, firstDiff, nc - firstDiff);
				joined = Seq(arrayPush(shared, Choices([Seq(tail1), Seq(tail2)])));
				arrayPush(subrange(acc, 0, n - 1), joined);
			} else {
				arrayPush(acc, c);
			}
		}
	});
	Production(p.name, p.caching, p.type, choices);
}
