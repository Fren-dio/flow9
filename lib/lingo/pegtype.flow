import lib/string;

export {
	PegType ::= PegUnknown, PegBool, PegInt, PegDouble, PegStringType, PegStruct, PegArray, PegUnion, PegError, PegRuleType, PegVoid;
		PegUnknown();
		PegBool();
		PegInt();
		PegDouble();
		PegStringType();
		PegStruct(name : string, args : [PegType]);
		PegArray(c : PegType);
		PegUnion(structs : [PegStruct]);
		PegError(error : string);
		PegRuleType(rule : string);
		PegVoid();


	pegType2string(t : PegType) -> string;

	isPegTypeError(t : PegType) -> bool;
}


pegType2string(t : PegType) -> string {
	switch (t) {
		PegVoid(): "void";
		PegBool(): "bool";
		PegInt(): "int";
		PegDouble(): "double";
		PegStringType(): "string";
		PegUnknown(): "?";
		PegError(e): e;
		PegRuleType(n): n;
		PegStruct(sn, as): sn + "("  + strGlue(map(as, pegType2string), ", ") + ")";
		PegArray(at): "[" + pegType2string(at) + "]";
		PegUnion(s): strGlue(map(s, pegType2string), " | ");
	}
}

isPegTypeError(t : PegType) -> bool {
	switch (t) {
		PegVoid(): false;
		PegBool(): false;
		PegInt(): false;
		PegDouble(): false;
		PegStringType(): false;
		PegUnknown(): false;
		PegError(e): true;
		PegStruct(n, args): exists(args, isPegTypeError);
		PegUnion(s): exists(s, isPegTypeError);
		PegRuleType(rt): false;
		PegArray(r): isPegTypeError(r);
	}
}
