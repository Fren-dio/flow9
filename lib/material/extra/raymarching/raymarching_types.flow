export {
		RMScene ::= RMCompositeObject, RMPrimitive, RMTranslate, RMUnion2, RMUnion, RMSmoothUnion, RMMaterial, RMEmpty;
	RMLights ::= RMCompositeLight, RMTranslate, RMLightMaterial, RMLight, RMPlus, RMEmpty;
	RMObject ::= RMScene, RMLights;
		RMPrimitive ::= RMSphere, RMPlane, RMBox, RMRoundBox, RMBoxFrame, RMTorus, RMCappedTorus;
			RMSphere(radius : double);
			RMPlane(normal : RMXYZ, height : double);
			RMBox(box : RMXYZ);
			RMRoundBox(box : RMXYZ, radius : double);
			RMBoxFrame(box : RMXYZ, e : double);
			RMTorus(R : double, r : double);
			RMCappedTorus(percent : double, R : double, r : double);
		RMCompositeObject(object : RMPrimitive, name : string, material : RMMaterials, position : RMCoordinate);
		RMCompositeLight(size : double, name : string, color : RMColor, position : RMCoordinate);
		RMTranslate(object : RMObject, d : RMCoordinate);
		RMUnion2(object1 : RMScene, object2 : RMScene);
		RMUnion(objects : [RMScene]);
		RMSmoothUnion(objects : [RMScene], k : double);
		RMMaterial(object : RMScene, color : RMMaterials);
		RMLightMaterial(object : RMLights, color : RMColor);
		RMMaterials ::= RMColor, RMReflect;
			RMColor(color : int);
			RMReflect(color : int, mixCoef : double);
		RMLight(size : double);
		RMPlus(object1 : RMLights, object2 : RMLights);
		RMEmpty();

	RMCamera(position : RMXYZ, direction : RMXYZ);

	RMCoordinate ::= RMXYZ, RMX, RMY, RMZ, RMXY, RMXZ, RMYZ;
		RMXYZ(x : double, y : double, z : double);
		RMXY(x : double, y : double);
		RMXZ(x : double, z : double);
		RMYZ(y : double, z : double);
		RMX(x : double);
		RMY(y : double);
		RMZ(z : double);

	RMIExp ::= RMICall, RMIP, RMIDouble, RMIInt, RMIBool, RMIXYZ, RMIVar, RMIConcat, RMIProperty, RMIEmpty;
		RMICall(fn : RMC, args : [RMIExp]);
		// A function, either an operator or function call
		RMC ::= RMIOp, RMIFn;
			// Operators are unary (prefix notation), binary operators, or the ? operator for ternary in GLSL syntax
			RMIOp(opName : string);
			// Function call syntax for these functions
			RMIFn(fnName : string);
		// The point to which we have to measure the distance
		RMIP();
		RMIDouble(num : double);
		RMIInt(num : int);
		RMIBool(num : bool);
		RMIXYZ(x : double, y : double, z : double);
		RMIVar(name : string);
		RMIConcat(exp1 : RMIExp, exp2 : RMIExp);
		RMIProperty(exp : RMIExp, id : int, property : RMIExp);
		RMIEmpty();
}