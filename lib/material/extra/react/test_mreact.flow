import material/extra/react/material_react;

main() {
	setRendererType("html");

	content =
		[
			MText("FLOW TOP TEXT", []),
			// Case 1 : Just a DOM-element
			makeSimpleParagraph(),
			// Case 2 : Static element from a library
			makeBootstrapSpinner(),
			// Case 3 : Button element from a library, change state from flow, provide an onClick listener
			makeBootstrapButton(),
			// Case 4 : Customly created ToggleButtonGroupControlled element, based on elements from library. State is changed from both flow and React sides.
			makeBootstrapToggleButtonGroup(),
			MText("FLOW BOTTOM TEXT", []),
		]
		|> (\arr -> map(arr, \el -> MBorder4(8., el)))
		|> MLines;
	
	mrender(makeMaterialManager([]), true, content);
}

makeSimpleParagraph() -> Material {
	element = "p";
	props = JsonObject([
		Pair("style", JsonObject([
			Pair("marginBottom", JsonString("auto"))
		])),
		Pair("children", JsonString("paragraph text"))
	]);

	MReact(element, props, makeTree(), []);
}

makeBootstrapSpinner() -> Material {
	element = "ReactBootstrap.Spinner";
	props = JsonObject([
		Pair("animation", JsonString("border"))
	]);

	MReact(element, props, makeTree(), []);
}

makeBootstrapButton() -> Material {
	element = "ReactBootstrap.Button";
	props = JsonObject([
		Pair("variant", JsonString("primary")),
		Pair("children", JsonString("Button"))
	]);

	isDisabled = make(JsonBool(true));
	state = makeTree1("disabled", isDisabled);
	timer(3000, \ -> nextDistinct(isDisabled, JsonBool(false)));

	MReact(element, props, state, [ReactListener("onClick", \event -> {
		println("react onClick listener. screenX = " + getReactEventAttribute(event, "screenX"));
	})]);
}

makeBootstrapToggleButtonGroup() -> Material {
	element = "ToggleButtonGroupControlled";
	props = JsonObject([]);

	selected = make(JsonArray([
		JsonDouble(1.)
	]));

	timer(3000, \ -> nextDistinct(selected, JsonArray([
		JsonDouble(1.),
		JsonDouble(3.)
	])));

	size = make(JsonString("sm"));
	timer(6000, \ -> nextDistinct(size, JsonString("lg")));

	state = pairs2tree([
		Pair("value", selected),
		Pair("size", size)
	]);

	MReact(element, props, state, []);
}