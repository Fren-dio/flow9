import material/extra/docking_ui/internal/material_docking_ui;

export {	

	// Helpers for a docking editor
	
	makeMDEditor(
		// A label for the editor
		keyGroupName : string,
		// The docking state
		state : MDockingState,
		// The editor stage wrapped by dockable areas
		content : Material,
		// Draw a layout for the docking editor
		layoutFn : (Material, MDockingState) -> Material,
		// Drop areas with panels
		dropAreas : [MDAreaPanels],
		// Some docking styles
		style : [MDockingStyle]
	) -> Material;

	// Panels docked in each docking area
	MDAreaPanels(title : string, panels : [MDPanelType]);
		MDPanelType ::= MDPanel, MDToolbar;

			MDPanel(
				// Panel's title
				title : string,
				// If panel is docked to an MDCols area or MDLines, it can be seen as col ID or row ID 
				position : int,
				// Panel's content
				content : Material,
				// Starting panel size
				minSize : WidthHeight,
				// panel's style
				style : [MDockingPanelStyle]
			);

			MDToolbar(
				// If toolbar is docked to an MDCols area or MDLines, it can be seen as col ID or row ID
				position : int,
				// Toolbar's content
				buttons : [MDPanelToolbarItem],
				// panel's style
				style : [MDockingPanelStyle]
			);


	// Helpers for docking areas

	// Docking cols
	makeMDCols(area : MDArea) -> (MDockingState) -> Material;
	// Docking cols reversed version - Right to left
	makeMDColsR(area : MDArea) -> (MDockingState) -> Material;
	// Docking lines
	makeMDLines(area : MDArea) -> (MDockingState) -> Material;
	// Docking lines reversed version - Bottom to top
	makeMDLinesB(area : MDArea) -> (MDockingState) -> Material;

	// Hook for docking areas in layout and styles for customizations
	MDArea(title : string, style : [MDockingAreaStyle]);


	// Helpers for layout functions

	// Left, Right - docking layout
	makeMDockingLayoutFnLR(left : MDArea, right : MDArea) -> (Material, MDockingState) -> Material;
	// Top, Left, Right - docking layout
	makeMDockingLayoutFnTLR(top : MDArea, left : MDArea, right : MDArea) -> (Material, MDockingState) -> Material;
	// Top, Left, Right, Bottom - docking layout
	makeMDockingLayoutFnTLRB(top : MDArea, left : MDArea, right : MDArea, bottom : MDArea) -> (Material, MDockingState) -> Material;
}



makeMDEditor(
	keyGroupName : string,
	state : MDockingState,
	content : Material, 
	layoutFn : (Material, MDockingState) -> Material, 
	dropAreas : [MDAreaPanels],
	style : [MDockingStyle]
) -> Material {

	panelsA = concatA(mapi(dropAreas,\i, a -> {
		areas = getValue(state.dockingAreas);
		next(state.dockingAreas, setTree(areas, a.title, i));
		mapi(a.panels, \j, p -> {
			panelStyle = p.style;
			areaId = if (contains(panelStyle, MDPanelMobile())) -1 else i;
			panelType2DockingPanel(areaId, j, p)})
	}));

	filteredStyle = removeAllStructs(style, MDockingEnableLoadAndStoreCache("", false));

	addBox = \c : Material -> MAttachBox(c, state.stageWH);
	layout = layoutFn(addBox(content), state);

	MDockingUI(state, panelsA, layout, concat(filteredStyle, [
		MDockingEnableLoadAndStoreCache(keyGroupName, true)
	]))
}


panelType2DockingPanel(areaId : int, rowId : int, pt : MDPanelType) -> MDockingPanel {
	switch(pt) {
		MDPanel(t, colId, cnt, sz, st) : {
			MDockingPanel(
				t,
				MDPanelContent(cnt),
				MDock(areaId, colId, rowId),
				sz,
				st
			);

		}
		MDToolbar(colId, btns, st) : {
			MDockingPanel(
				"Toolbar",
				MDPanelToolbar(btns),
				MDock(areaId, colId, rowId),
				zeroWH,
				st
			);
		}
	}
}


makeMDCols(area : MDArea) -> (MDockingState) -> Material {
	\state : MDockingState -> {
		areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, -1);
		MDockingArea(true, state, areaId, area.style);
	}
}
makeMDColsR(area : MDArea) -> (MDockingState) -> Material {
	\state : MDockingState -> {
		areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, -1);
		MDockingArea(true, state, areaId, concat([MDockingRightCols()], area.style))
	}
}
makeMDLines(area : MDArea) -> (MDockingState) -> Material {
	\state : MDockingState -> {
		areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, -1);
		MDockingArea(false, state, areaId, area.style)
	}
}
makeMDLinesB(area : MDArea) -> (MDockingState) -> Material {
	\state : MDockingState -> {
		areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, -1);
		MDockingArea(false, state, areaId, concat([MDockingBottomLines()], area.style))
	}
}

makeMDockingLayoutFnLR(left : MDArea, right : MDArea) -> (Material, MDockingState) -> Material {
	\content : Material, state : MDockingState -> {
		MColsA([
			makeMDCols(left)(state),
			MDContent(state, content),
			makeMDColsR(right)(state)
		])
	}
}

makeMDockingLayoutFnTLR(top : MDArea, left : MDArea, right : MDArea) -> (Material, MDockingState) -> Material {
	\content : Material, state : MDockingState -> {
		MLinesA([
			makeMDLines(top)(state),
			MColsA([
				makeMDCols(left)(state),
				MDContent(state, content),
				makeMDColsR(right)(state)
			]),
		])
	}
}

makeMDockingLayoutFnTLRB(top : MDArea, left : MDArea, right : MDArea, bottom : MDArea) -> (Material, MDockingState) -> Material {
	\content : Material, state : MDockingState -> {
		MLinesA([
			makeMDLines(top)(state),
			MColsA([
				makeMDCols(left)(state),
				MDContent(state, content),
				makeMDColsR(right)(state)
			]),
			makeMDLinesB(bottom)(state)
		])
	}
}