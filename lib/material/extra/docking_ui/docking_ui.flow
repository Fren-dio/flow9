import material/extra/docking_ui/internal/material_docking_ui;

export {	

	// Helpers for a docking editor
	
	makeMDEditor(
		// A label for the editor
		keyGroupName : string,
		// The docking state
		state : MDockingState,
		// The editor stage wrapped by dockable areas
		content : Material,
		// Draw a layout for the docking editor
		layoutFn : (Material, MDockingState) -> Material,
		// Panels used in thi editor, could be docked or mobile
		panelsA : [MDockingPanel],
		// Some docking styles
		style : [MDockingStyle]
	) -> Material;



	MDArea(areaId : int, style : [MDockingAreaStyle]);
	// MDArea(areaId : int, panels : [MDPanelType], style : [MDockingAreaStyle]);

		MDPanelType ::= MDPanel, MDToolbar;
			MDPanel(
				// Panel's title
				title : string,
				// Panel's content
				content : Material,
				// If panel is docked to an MDCols area or MDLines, it can be seen as col ID or row ID 
				dockOrder : int,
				// Starting panel size
				minSize : WidthHeight,
				// panel's style
				style : [MDockingPanelStyle]
			);

			MDToolbar(
				// Toolbar's content
				content : MDockingPanelContent,
				// If toolbar is docked to an MDCols area or MDLines, it can be seen as col ID or row ID
				dockOrder : int,
				// Starting panel size
				minSize : WidthHeight,
				// panel's style
				style : [MDockingPanelStyle]
			);


	// Helpers for docking areas

	// Docking cols
	makeMDCols(areaId : int, style : [MDockingAreaStyle]) -> (MDockingState) -> Material;
	// Docking cols reversed version - Right to left
	makeMDColsR(areaId : int, style : [MDockingAreaStyle]) -> (MDockingState) -> Material;
	// Docking lines
	makeMDLines(areaId : int, style : [MDockingAreaStyle]) -> (MDockingState) -> Material;
	// Docking lines reversed version - Bottom to top
	makeMDLinesB(areaId : int, style : [MDockingAreaStyle]) -> (MDockingState) -> Material;

	// Helpers for layout functions

	// Left, Right - docking layout
	makeMDockingLayoutFnLR(left : MDArea, right : MDArea, contentStyle : [MDockingStyle]) -> (Material, MDockingState) -> Material;
	// Top, Left, Right - docking layout
	makeMDockingLayoutFnTLR(top : MDArea, left : MDArea, right : MDArea, contentStyle : [MDockingStyle]) -> (Material, MDockingState) -> Material;
	// Top, Left, Right, Bottom - docking layout
	makeMDockingLayoutFnTLRB(top : MDArea, left : MDArea, right : MDArea, bottom : MDArea, contentStyle : [MDockingStyle]) -> (Material, MDockingState) -> Material;
}



makeMDEditor(
	keyGroupName : string,
	state : MDockingState,
	content : Material, 
	layoutFn : (Material, MDockingState) -> Material, 
	panelsA : [MDockingPanel], 
	style : [MDockingStyle]
) -> Material {

	filteredStyle = removeAllStructs(style, MDockingEnableLoadAndStoreCache("", false));

	addBox = \c : Material -> MAttachBox(c, state.stageWH);
	layout = layoutFn(addBox(content), state);

	MDockingUI(state, panelsA, layout, concat(filteredStyle, [
		MDockingEnableLoadAndStoreCache(keyGroupName, true)
	]))
}

makeMDCols(areaId : int, style : [MDockingAreaStyle]) -> (MDockingState) -> Material {
	\state : MDockingState -> MDockingArea(true, state, areaId, style)
}
makeMDColsR(areaId : int, style : [MDockingAreaStyle]) -> (MDockingState) -> Material {
	\state : MDockingState -> MDockingArea(true, state, areaId, concat([MDockingRightCols()], style))
}
makeMDLines(areaId : int, style : [MDockingAreaStyle]) -> (MDockingState) -> Material {
	\state : MDockingState -> MDockingArea(false, state, areaId, style)
}
makeMDLinesB(areaId : int, style : [MDockingAreaStyle]) -> (MDockingState) -> Material {
	\state : MDockingState -> MDockingArea(false, state, areaId, concat([MDockingBottomLines()], style))
}

makeMDockingLayoutFnLR(left : MDArea, right : MDArea, contentStyle : [MDockingStyle]) -> (Material, MDockingState) -> Material {
	\content : Material, state : MDockingState -> {
		MColsA([
			makeMDCols(left.areaId, left.style)(state),
			MDContent(state, content, contentStyle),
			makeMDColsR(right.areaId, right.style)(state)
		])
	}
}

makeMDockingLayoutFnTLR(top : MDArea, left : MDArea, right : MDArea, contentStyle : [MDockingStyle]) -> (Material, MDockingState) -> Material {
	\content : Material, state : MDockingState -> {
		MLines2A(
			makeMDLines(top.areaId, top.style)(state),
			MColsA([
				makeMDCols(left.areaId, left.style)(state),
				MDContent(state, content, contentStyle),
				makeMDColsR(right.areaId, right.style)(state)
			])
		)
	}
}

makeMDockingLayoutFnTLRB(top : MDArea, left : MDArea, right : MDArea, bottom : MDArea, contentStyle : [MDockingStyle]) -> (Material, MDockingState) -> Material {
	\content : Material, state : MDockingState -> {
		MLinesA([
			makeMDLines(top.areaId, top.style)(state),
			MColsA([
				makeMDCols(left.areaId, left.style)(state),
				MDContent(state, content, contentStyle),
				makeMDColsR(right.areaId, right.style)(state)
			]),
			makeMDLinesB(bottom.areaId, bottom.style)(state),
		])
	}
}