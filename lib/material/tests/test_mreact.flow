import material/material2tropic;

main() {
	setRendererType("html");
	text = "FLOW TEXT";

	// reactComponent = makeSimpleParagraph();
	// reactComponent = makeBootstrapSpinner();
	reactComponent = makeBootstrapButton();

	content =
		MLines([
			reactComponent,
			MText(text, []),
		]);
	
	mrender(makeMaterialManager([]), true, content);
}

makeSimpleParagraph() -> Material {
	element = "p";
	props = JsonObject([
		Pair("style", JsonObject([
			Pair("marginBottom", JsonString("auto"))
		])),
		Pair("children", JsonString("paragraph text"))
	]);

	MReact(element, props, makeTree());
}

makeBootstrapSpinner() -> Material {
	element = "ReactBootstrap.Spinner";
	props = JsonObject([
		Pair("animation", JsonString("border"))
	]);

	MReact(element, props, makeTree());
}

makeBootstrapButton() -> Material {
	element = "ReactBootstrap.Button";
	props = JsonObject([
		Pair("variant", JsonString("primary")),
		Pair("children", JsonString("Button"))
	]);

	isDisabled = make(JsonBool(true));
	clickCount = make(JsonDouble(0.));
	fpprint("clickCount")(clickCount);

	state = setTree(makeTree1("disabled", isDisabled), "count", clickCount);
	timer(3000, \ -> nextDistinct(isDisabled, JsonBool(false)));

	MReact(element, props, state);
}

MReact(element : string, props : JsonObject, state : Tree<string, DynamicBehaviour<Json>>) -> Material {
	TReact(element, props, state)
}

TReact(element : string, props : JsonObject, state : Tree<string, DynamicBehaviour<Json>>) -> Material {
	wh = makeWH();
	TFForm(
		FReact(wh, element, props, state),
		TFormMetrics(
			fwidth(wh),
			fheight(wh),
			fheight(wh)
		)
	)
}

FReact(wh : DynamicBehaviour<WidthHeight>, element : string, props : JsonObject, state : Tree<string, DynamicBehaviour<Json>>) -> FForm {
	metrics = make(FormMetrics(0., 0., 0., 0.));
	blockResponse = ref false;

	FNativeForm(
		FEmpty(),
		metrics,
		\ -> FEmpty(),
		\__, __, __ -> {
			stateInit = foldTree(state, [], \k, v, acc -> arrayPush(acc, Pair(k, getValue(v))));
			stateInitStr = json2string(JsonObject(stateInit));
			propsStr = json2string(props);

			onStateChange = \str -> {
				blockResponse := true;
				stateJson = parseJsonSafe(str);
				fields = getJsonObjectValue(stateJson, []);
				iter(fields, \field -> {
					maybeApply(lookupTree(state, field.first), \stateValue -> nextDistinct(stateValue, field.second))
				});
				blockResponse := false;
			}

			container = makeReactContainer(element, propsStr, stateInitStr, onStateChange);
			
			uns = makeSubscribe(metrics, \mt -> nextDistinct(wh, WidthHeight(mt.width, mt.height)))();
			unsTree = mapTree2(state, \key, val -> {
				makeSubscribe2(val, \v -> {
					if (!^blockResponse) {
						updateReactState(container, key, json2string(v));
					}
				}
				)()
			});

			addExtendedEventListener(container, "resize", \met -> {
				wd = met[0];
				hgt = met[1];
				nextDistinct(metrics, FormMetrics(wd, hgt, hgt, hgt));
			});

			NativeRenderResult(
				[container],
				\ -> {
					uns();
					traverseInOrder(unsTree, \__, unsFn -> unsFn());
				}
			)
		}

	)
}
