import material/iscript/material_iscript_dialog;
import material/internal/material_tree;

export {
	MFocusTree(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material;
}


MFocusTree(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material {
	MDynamicArrayTree(makeDynamicArray([MFocusTree2T(manager, manager.focus, m2t)]), [IScriptRecordingEnabled(const(false))])
	|> (\f -> MBorder(0., 8., 0., 8., f))
}

MFocusTree2T(manager : MaterialManager, focus : MaterialFocus, m2t : (Material, MFocusGroup) -> Tropic) -> MDynamicArrayTreeNode {
	hover = make(false);

	switchMaterialFocus(
		focus,
		\f : MFocus ->
			MDynamicArrayTreeNode(
				either(
					f.iScriptId,
					f.name
				),
				\__ ->
					(\p -> TBaselineCols([
					MText2T(p, i2s(fgetValue(f.id)), [MCaption()])
					|> TSetMinWidth(TFixed(16., 0.))
					|> (\f2 -> TBorder(8., 0., 8., 0., f2)),
					MEllipsisText2T(manager, p, MEllipsisText(f.name, [MCaptionSolid(), MShowTooltip(const(true))]), m2t)
					|> (\f2 -> TBorder(0., 0., 4., 0., f2)),
					eitherMap(
						f.iScriptId,
						\id ->
							MEllipsisText2T(manager, p, MEllipsisText(id, [MCaption(), MShowTooltip(const(true))]), m2t)
							|> (\f2 -> TBorder(0., 0., 4., 0., f2)),
						TEmpty()
					),
					MIconButton2T(
						manager,
						p,
						MIconButton(
							"add",
							\ ->
								addIScriptEventDialog(
									manager,
									focus,
									\rec -> addIScriptRecordWithDelay(manager, rec.first, rec.second),
									nop,
									m2t
								),
							[MIconSize(16.), MIconButtonBorder(4.)],
							[]
						),
						m2t
					)
					|> (\f2 -> TBorder(0., 0., 8., 0., f2)),
					MIconButton2T(
						manager,
						p,
						MIconButton(
							"text_fields",
							\ -> showTextsInsideFocus(manager, f, m2t),
							[MIconSize(16.), MIconButtonBorder(4.)],
							[]
						),
						m2t
					)
				])
				|> (\f2 ->
					TConstruct(
						[
							makeSubscribe2focusHovered(manager, \ -> Some(f), hover)
						],
						f2
					)
				)
				|> TCenterY)
				|> MGetFocusGroup,
				makeDynamicArray([]),
				[THovering(hover)]
			),
		\f : MFocusGroup ->
			MDynamicArrayTreeNode(
				either(
					f.iScriptId,
					f.name
				),
				\__ ->
					(\p -> TBaselineCols([
						MText2T(p, i2s(fgetValue(f.id)), [MCaption()])
						|> TSetMinWidth(TFixed(16., 0.))
						|> (\f2 -> TBorder(8., 0., 8., 0., f2)),
						MEllipsisText2T(manager, p, MEllipsisText(f.name, [MCaptionSolid(), MShowTooltip(const(true))]), m2t)
						|> (\f2 -> TBorder(0., 0., 4., 0., f2)),
						eitherMap(
							f.iScriptId,
							\id ->
								MEllipsisText2T(manager, p, MEllipsisText(id, [MCaption(), MShowTooltip(const(true))]), m2t)
								|> (\f2 -> TBorder(0., 0., 4., 0., f2)),
							TEmpty()
						),
						MIconButton2T(
							manager,
							p,
							MIconButton(
								"add",
								\ ->
									addIScriptEventDialog(
										manager,
										focus,
										\rec -> addIScriptRecordWithDelay(manager, rec.first, rec.second),
										nop,
										m2t
									),
								[MIconSize(18.), MIconButtonBorder(4.)],
								[]
							),
							m2t
						)
						|> (\f2 -> TBorder(0., 0., 8., 0., f2)),
						MIconButton2T(
							manager,
							p,
							MIconButton(
								"text_fields",
								\ -> showTextsInsideFocus(manager, f, m2t),
								[MIconSize(16.), MIconButtonBorder(4.)],
								[]
							),
							m2t
						)
					])
					|> (\f2 ->
						TConstruct(
							[
								makeSubscribe2focusHovered(manager, \ -> Some(f), hover)
							],
							f2
						)
					)
					|> TCenterY)
					|> MGetFocusGroup,
				mapDynamicArray(
					subfilterDynamicArray(
						makeDynamicArrayFromTransform(fselect(f.focusIds, getTreeValues |> FLift) |> fthrottleUntilNextFrameRendered),
						\f2 -> f2.recordingEnabled
					),
					\f2 : MaterialFocus -> MFocusTree2T(manager, f2, m2t)
				),
				[THovering(hover), MExpanded(make(true))]
			)
	)
}

showTextsInsideFocus(manager : MaterialManager, focus : MaterialFocus, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	closeB = make(false);

	renderMDialog(
		manager,
		closeB,
		[
			MDialogUseFrame(),
			MDialogScroll(),
			MDialogActions([
				MTextButton(_("CLOSE"), \ -> next(closeB, true), [], []),
			])
		],
		MLines(map(
			getTextFromIScriptForm(takeLogicalSnapshot(focus.form)),
			\text -> MText(text, [])
		)),
		m2t
	);
}