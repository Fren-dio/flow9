import tools/flow9/backends/cpp/cpp_backend;

export {
	dstruct2id(backend : Backend<CppInfo>, s : DStruct) -> string;

	bType2id(type : BType) -> string;
	dType2id(type : DType) -> string;

	bTypePar2cpp(btype : BType) -> string;
	bTypeParId2cpp(id : string) -> string;

	isBExpStringValue(e : BExp) -> bool;

}

dstruct2id(backend : Backend<CppInfo>, s : DStruct) -> string {
	eitherMap(
		lookupTree(backend.info.structIds, s.id),
		\id -> getStructIdMember() + " = " + i2s(id),
		""
	);
}

getStructIdMember() -> string {
	" unsigned int _id";
}

isBExpStringValue(e : BExp) -> bool {
	switch (e : BExp) {
		BString(__) : true;
		default : false;
	}
}

bType2id(type : BType) -> string {
	switch (type : BType) {
		BTypePar(id) : id;
		BTypeName(id, __) : id;
		BTypeFunction(__, __) : "";
	}
}

dType2id(type : DType) -> string {
	switch (type : DType) {
		DTypeName(id, __, __) : id;
		DTypePar(id, __) : id;
		DTypeFunction(__, __, __) : "";
	}
}

bTypePar2cpp(btype : BType) -> string {
	switch (btype) {
		BTypePar(id): bTypeParId2cpp(id);
		default: "";
	}
}

bTypeParId2cpp(id : string) -> string {
	// In C++, we use a, b, c, ...
	len = strlen(id) - 1;
	fromCharCode(getCharCodeAt("A", 0) + len);
}