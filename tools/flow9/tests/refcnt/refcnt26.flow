native println2 : io (flow) -> void = Native.println;
native strlen : (string) -> int = Native.strlen;
native substring : (s : string, start : int, length : int) -> string = Native.substring;

Struct1(i : int);
Struct2();
Struct6(value : string);

// ------------------------------------------------------------------------------------------
fn1(v : ?, fn : (?) -> ??) -> ?? {
	fn(v);
}
changeInt(val : int) -> int { val * 20 }
changeStruct(val : Struct1) -> Struct1 { Struct1(val.i * 20); }
foo1() -> void {
	fn1(10, changeInt);
	fn1(Struct1(10), changeStruct);
	fn1("st", strlen);
	// TODO: lambda
}
// ------------------------------------------------------------------------------------------
foo2() -> void {
	a = Struct1(-3); // to create a structure declaration
	if (Struct1(1) > Struct1(2)) 1 else 2;
	{}
}
// ------------------------------------------------------------------------------------------
foo3() -> void {
	name = Struct6("world");
	// order of args
	// https://en.cppreference.com/w/cpp/language/eval_order
	println2(substring("Hi," + name.value + "!", 3, strlen(name.value))); // ERROR. expected : world
}
// ------------------------------------------------------------------------------------------
foo4() -> void {
	b = Struct2() == Struct2();
	{}
}
// ------------------------------------------------------------------------------------------
foo5() -> void {
	c = "d" > "f";
	{}
}
// ------------------------------------------------------------------------------------------
foo6() -> void {
	if (Struct2() == Struct2()) println2("foo5 1") else println2("foo5 2");
	{}
}
// ------------------------------------------------------------------------------------------
fn7(v : int, callback : () -> void) -> void {
	if (v > 0) {
		println2(">0");
	} else {
		println2("<0");
		callback()
	}
}
fnError() -> void {
	println2("callback");
}
foo7() -> void {
	fn7(-1, fnError);
	{}
}
// ------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------

main() {
	foo1();
	foo2();
	foo3(); // -
	foo4();
	foo5();
	foo6();
	foo7();
	{}
}
