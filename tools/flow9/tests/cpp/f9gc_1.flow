native println2 : io (flow) -> void = Native.println;

Struct(val : int);

main() {
	val = Struct(1);
	println2(val);
	val2 = Struct(5);
	val3 = val;
	println2(val3);
}

/*
BProgram(
	TreeNode("Struct", DStruct("Struct", false, [], [DStructArg("flow_val", false, DTypeName("int", [], 68), 62)], 55), TreeEmpty(), TreeEmpty(), 1),
	TreeEmpty(),
	[
		BExpNative("flow_println2", true, BTypeFunction([BTypeName("flow", [])], BTypeName("void", [])), "Native.println"),
		BStatFunction(
			"flow_main",
			[],
			BLetStatement(
				"flow_val",
				BConstruct("Struct", [BInt(1)], BTypeName("Struct", [])),
				BSequenceStatement([
					BReturn(BCall(
						BVar("flow_println2", BTypeFunction([BTypeName("Struct", [])], BTypeName("void", []))),
						[BVar("flow_val", BTypeName("Struct", []))],
						BTypeName("void", [])
					)),
					BLetStatement(
						"flow_val2",
						BConstruct("Struct", [BInt(5)], BTypeName("Struct", [])),
						BLetStatement(
							"flow_val3",
							BVar("flow_val", BTypeName("Struct", [])),
							BReturn(BCall(
								BVar("flow_println2", BTypeFunction([BTypeName("Struct", [])], BTypeName("void", []))),
								[BVar("flow_val3", BTypeName("Struct", []))],
								BTypeName("void", [])
							))
						)
					)
				])
			),
			false,
			BTypeFunction([], BTypeName("void", []))
		)
	]
)
*/