native iter : ([?], (?)->void) -> void = Native.iter;
native println2 : io (flow) -> void = Native.println;

// TODO: cast!
Test(left : flow, right : flow);
InnerStruct(name : FlowStruct);
FlowStruct(val : flow);
UnionStruct(val : U1);
U1 ::= U2;
U2 ::= FlowStruct;

SimpleStruct(val : string);
U3 ::= SimpleStruct;
SimpleStruct2(uv : U3);


Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

isSome(m : Maybe<?>) -> bool {
	switch (m : Maybe) {
		None(): false;
		Some(__): true;
	}
}

native map : ([?], (?) -> ??) -> [??] = Native.map;
native filter : (a : [?], test : (?) -> bool) -> [?] = Native.filter;

testCast(a : [?], test : (?) -> Maybe<??>) -> [??] {
	mapped : [Maybe<??>] = map(a, test);
	filtered = filter(mapped, isSome);
	map(filtered, \v : Maybe<??> ->
		cast(v : Maybe<??> -> Some<??>).value
	);
}

// TODO
//Struct1(a : int, b : flow, c : Struct2);
Struct2(v1 : ?, v2 : ??);

main() -> void {
	u1 : U2 = FlowStruct("union21");
	u2 : U2 = FlowStruct("union22");
	v = InnerStruct(FlowStruct("first"));
	tests = [
		Test(1, 1),
		Test(2.1, 1.2),
		Test(false, true),
		Test("abc", "abc"),
		Test(InnerStruct(FlowStruct("first")), InnerStruct(FlowStruct("last"))),
		Test(u1, u2),
		Test(UnionStruct(u2), UnionStruct(u1)),
		Test(["a", "b"], ["c", "d"]),
	];
	iter(tests, \t -> println2(t.left));

	u3 : U3 = SimpleStruct("union21");
	u4 = SimpleStruct("union22");
	u5 = SimpleStruct2(u3);

	cast1 = testCast([1, 2, 3, 4], \v -> if (v > 2) Some(-v) else None());
	println2(cast1);


	s1 = Struct2(5, 5.1);
}
