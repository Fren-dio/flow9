native println2 : io (flow) -> void = Native.println;

Struct(val : int);

//U ::= Struct;

inc(val : int) -> int {
	val + 1;
}

main() {
	dx = 10;
	val = Struct(1);
	println2(val); // Struct(1)

	i1 = 10;
	i2 = inc(i1);
	println2(i2);

	dec = \v -> {
		v2 = v - dx;
		v2 + dx - 1;
	}

	i3 = dec(10);
	
	v2 = 11; // OK

	println2("end");

	// Variable shadowing. Forbidden
	// inc = \val -> val + dx;
	// val3 = inc(2);
	// println2(val3); // 12

	// Variable shadowing. Forbidden
	// switch (Struct(2) : U) {
	// 	Struct(val): println2(val); // 2
	// }

	// Variable shadowing. Forbidden
	// {
	// 	val = 11;
	// }

	// Variable shadowing. Forbidden
	// val = 12;

	
}

/* BEFORE dx, inc fn
BProgram(
	TreeNode("Struct", DStruct("Struct", false, [], [DStructArg("flow_val", false, DTypeName("int", [], 68), 62)], 55), TreeEmpty(), TreeEmpty(), 1),
	TreeEmpty(),
	[
		BExpNative("flow_println2", true, BTypeFunction([BTypeName("flow", [])], BTypeName("void", [])), "Native.println"),
		BStatFunction(
			"flow_main",
			[],
			BLetStatement(
				"flow_val",
				BConstruct("Struct", [BInt(1)], BTypeName("Struct", [])),
				BSequenceStatement([
					BReturn(BCall(
						BVar("flow_println2", BTypeFunction([BTypeName("flow", [])], BTypeName("void", []))),
						[BVar("flow_val", BTypeName("Struct", []))],
						BTypeName("void", [])
					)),
					BLetStatement(
						"flow_inc",
						BLambda(
							["flow_val"],
							BCall(BVar("+", BTypeFunction([BTypeName("int", []), BTypeName("int", [])], BTypeName("int", []))), [BVar("flow_val", BTypeName("int", [])), BInt(1)], BTypeName("int", [])),
							BTypeFunction([BTypeName("int", [])], BTypeName("int", []))
						),
						BLetStatement(
							"flow_val3",
							BCall(
								BVar("flow_inc", BTypeFunction([BTypeName("int", [])], BTypeName("int", []))),
								[BInt(2)],
								BTypeName("int", [])
							),
							BReturn(BCall(
								BVar("flow_println2", BTypeFunction([BTypeName("flow", [])], BTypeName("void", []))),
								[BVar("flow_val3", BTypeName("int", []))],
								BTypeName("void", [])
							))
						)
					)
				])
			),
			false,
			BTypeFunction([], BTypeName("void", []))
		)
	]
)
*/