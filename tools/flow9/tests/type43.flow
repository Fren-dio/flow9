import form/form;
import render;

renderText(text : string, style : [CharacterStyle], available : Behaviour<WidthHeight>, zorder : [int], tabOrder: [int]) -> void {
	textfield = makeStyledTextfield(text, style);
	metrics = getTextMetrics(textfield);

	if (contains(style, SkipOrderCheck())) {
		setTextSkipOrderCheck(textfield, true);
	}

	uns =
		eitherMap(
			tryExtractStruct(style, WordSpacing(zero)),
			\ws -> [makeSubscribe(ws.spacing, \spacing -> setTextWordSpacing(textfield, spacing))()],
			[]
		);

	disposer = \ -> {
		applyall(uns);
		// Flash is not very helpful: If a text has the focus, but dies, then we effectively lose focus
		if (flash && getFocus(textfield)) {
			setFocus(getStage(), true);
		}
		deleteNative(textfield);
	}

	widthHeight = const(WidthHeight(getTextFieldWidth(textfield), getTextFieldHeight(textfield)));
	caps = ClipCapabilities(true, false, true, false, true);

	uStruct = fold(style, None(), \acc, s -> switch(s) { Underlined(v): Some(s); default: acc});
	if (isSome(uStruct)) {
		uStyle : [GraphicsStyle] = either(uStruct, Underlined([])).style;
		urr = 
			Graphics(
				[
					// TODO: it is the same as TUnderline. Replace height by underline_position
					// or at least consider to replace by baseline +
					MoveTo(0.0, getValue(widthHeight).height - 1.0),
					LineTo(getValue(widthHeight).width, getValue(widthHeight).height - 1.0),
				],
				// if style for underline is specified then use it,
				// otherwise use the one that is used by text
				if (uStyle != []) uStyle
				else [
					// TODO: add underline_thickness
					Stroke(extractStruct(style, Fill(0x000000)).color)
				]
			);
	}
}