//native println2 : io (flow) -> void = Native.println;
native println2 : io (?) -> void = Native.println;
native quit : io (code : int) -> void = Native.quit;
native toString2 : (flow) -> string = Native.toString;
native map : ([?], (?) -> ??) -> [??] = Native.map;
native iter : ([?], (?)->void) -> void = Native.iter;

// Runtime/dynaimc natives
/*native getStructName : (flow) -> string = Native.getStructName;
native extractStructArguments : (value : flow) -> [flow] = Native.extractStructArguments;
native isArray : (value : flow) -> bool = Native.isArray;
native isSameStructType : (value1 : flow, value2 : flow) -> bool = Native.isSameStructType;
IllegalStruct(); // Common default value for makeStructValue
native makeStructValue : (structname : string, args : [flow], default_value : flow) -> flow = Native.makeStructValue;
native isSameObj : (value1 : ?, value2 : ?) -> bool = Native.isSameObj;*/

native getStructName : (?) -> string = Native.getStructName;
native isArray : (value : flow) -> bool = Native.isArray;
native isSameObj : (value1 : ?, value2 : ??) -> bool = Native.isSameObj;

native isSameStructType : (value1 : flow, value2 : flow) -> bool = Native.isSameStructType;

StrA(a : int);
StrB(a : StrA, b : string);
StrC(
	x : StrA,
	y : StrB
);

S1();
S2();
U ::= S1, S2;

main() {
	println2("Test runtime ...");
	a = StrA(5);
	b = StrB(a, "7");
	c = StrC(StrA(-1), b);

	println2("getStructName(" + "a"/*toString2(a)*/ + "): " + getStructName(a));
	println2("getStructName(" + "b"/*toString2(b)*/ + "): " + getStructName(b));
	println2("getStructName(" + "c"/*toString2(c)*/ + "): " + getStructName(c));

	/*println2("extractStructArguments(" + toString2(a) + "):");
	iter(extractStructArguments(a), \x -> println2("\t" + toString2(x)));

	println2("extractStructArguments(" + toString2(b) + "):");
	iter(extractStructArguments(b), \x -> println2("\t" + toString2(x)));

	println2("extractStructArguments(" + toString2(c) + "):");
	iter(extractStructArguments(c), \x -> println2("\t" + toString2(x)));*/

	arr0 : [int] = [];
	println2(/*"isArray(" + toString2(arr0) + "): " + toString2*/(isArray(arr0)));
	arr1 = [1, 2, 3];
	println2(/*"isArray(" + toString2(arr1) + "): " + toString2*/(isArray(arr1)));
	println2(/*"isArray(" + toString2(a) + "): " + toString2*/(isArray(a)));
	println2(/*"isArray(" + toString2(b) + "): " + toString2*/(isArray(b)));
	println2(/*"isArray(" + toString2(c) + "): " + toString2*/(isArray(c)));

	println2("c and b are the same: ");
	println2(isSameObj(c, b)); // false
	println2(isSameObj(arr1, [1,2,3])); // false
	println2(isSameObj([1,2,3], [1,2,3])); // false
	println2(isSameObj(arr1, arr1)); // true
	println2("strings: ");
	s= "1";
	println2(isSameObj(s, "2")); // false
	println2(isSameObj(s, s)); // true
	println2(isSameObj("1", "1")); // true
	println2(isSameObj(s, "1")); // true
	println2("simple types: ");
	println2(2 == 3);
	println2(2 == 2);
	println2(2.2 == 3.2);
	println2(2.2 == 2.2);
	println2("d" == "d");
	println2("unions: ");
	u1 : U = S1();
	u2 : U = S2();
	u3 : U = S1();
	println2(u1 == u2); // false
	println2(u2 == u2); // true
	println2(u1 == u3); // false

	/*objs : [flow] = [cast(a : StrA -> flow) , b, c, arr0, arr1];
	iter(objs, \o1 ->
		iter(objs, \o2 -> 
			println2("isSameStructType(" + toString2(o1) + ", " + toString2(o2) + "): " + toString2(isSameStructType(o1, o2)))
		)
	);

	c1 = makeStructValue("StrC", [cast(StrA(-1) : StrA -> flow), b], IllegalStruct());
	println2("c1: " + toString2(c1));
	println2("getStructName(" + toString2(c1) + "): " + getStructName(c1));
	println2("c1.x: " + toString2(c1.x));
	println2("c1.y: " + toString2(c1.y));

	println2("c and c are the same: " + toString2(isSameObj(c, c)));
	println2("c and c1 are the same: " + toString2(isSameObj(c, c1)));*/

	quit(0);
}