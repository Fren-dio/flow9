import tools/flow9/types/cgraph/cgraph;
import tools/flow9/types/ugraph/tmap;
import tools/flow9/bexp/bexp;

export {
	// At the end, we use this to resolve the eclasses
	resolveCNodes(tmap : TMap) -> Tree<int, TType>;

	// After resolution, check if two eclasses are the same
	isSameEClassInCMap(tmap : TMap, eclass1 : int, eclass2 : int) -> bool;

	// Given the resolution map, and a given eclass, find the final type
	resolveCNode(tmap : TMap, eclasses : Tree<int, TType>, eclass : int) -> Maybe<BType>;
}

resolveCNodes(tmap : TMap) -> Tree<int, TType> {
	println("TODO: Resolve the nodes");
	// This should iterate through the remaining constraints?
	makeTree();
}

isSameEClassInCMap(tmap : TMap, eclass1 : int, eclass2 : int) -> bool {
	// TODO: Look up what the root is
	true;
}

resolveCNode(tmap : TMap, eclasses : Tree<int, TType>, eclass : int) -> Maybe<BType> {
	println("TODO: Resolve " + i2s(eclass));
	None();
}
