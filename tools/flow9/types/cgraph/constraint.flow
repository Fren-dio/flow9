import tools/flow9/types/cgraph/cgraph;
import tools/flow9/types/cgraph/dtype;
import tools/flow9/types/ugraph/tmap;
import tools/flow9/types/pretty;

export {
	// When we know the type, find or make an eclass for this type
	resultCType(tmap : TMap, t : TType, reason : ErrorReason) -> TTypeEClass;

	// We know the result is a unification of these types
	unifyCType(tmap : TMap, left : TType, right : TType, reason : ErrorReason) -> TTypeEClass;

	// We know we have to subtype here - TODO: Figure out what the result is?
	subtypeCType(tmap : TMap, subtype : TType, supertype : TType, reason : ErrorReason) -> void;

	// When we have a DType, we use this one. Instantiates polymorphism
	dtype2CType(tmap : TMap, d : DType, reason : ErrorReason) -> TTypeEClass;
}

resultCType(tmap : TMap, t : TType, reason : ErrorReason) -> TTypeEClass {
	println("TODO: Result: " + prettyTType(t));
	eclass = 0;
	TTypeEClass(eclass);
}

unifyCType(tmap : TMap, left : TType, right : TType, reason : ErrorReason) -> TTypeEClass {
	println("TODO: Unify " + prettyTType(left) + " & " + prettyTType(right));
	TTypeEClass(0);
}

subtypeCType(tmap : TMap, subtype : TType, supertype : TType, reason : ErrorReason) -> void {
	println("TODO: Subtype " + prettyTType(subtype) + " â‰¤ " + prettyTType(supertype));
}

dtype2CType(tmap : TMap, d : DType, reason : ErrorReason) -> TTypeEClass {
	tt = dtype2CType2(tmap, ref makeTree(), d);
	resultCType(tmap, tt, reason);
}
