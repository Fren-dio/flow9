import tools/gringo/pflow/parse;
import tools/gringo/pflow/interpreter;
import tools/gringo/pflow/typechecker;
import tools/gringo/pflow/prettyprint;
import math/stringmath;

main() {
	code = "#include tools/gringo/pflow/tests/prime.flow";

	e : PExp = parsePFlow(code);
	// println(prettyPExp(e));

	if (false) {
		tenv = makeTypeEnv();
		t0 : TExp = convertPExp2TExp(tenv, e);
		t1 : TType = typecheckTExp(tenv, t0);

		if (false) {
			println("Equivalence class");
			generate(0, ^(tenv.unique), \tv -> {
				root = findUnionMapRoot(tenv.unionFindMap, tv);
				println("Root of " + i2s(tv) + " is " + i2s(root) + " with " + prettyTType(tenv, TTypeVar(tv)));
			});
			{}
		}
		rt : TExp = resolveTExp(tenv, t0);
		println(prettyTExp(tenv, rt));
	} else {
		start = timestamp();
		value = interpretPExp(makeTree(), e);
		println(value);
		println(d2st((timestamp() - start) / 1000.0, 2) + "s");
	}
	quit(0);
}
