// Automatically generated from Gringo grammar
import ds/list;

export {
	// This is a monster type used when parsing
	GriegoAst ::= GriegoAstList, GriegoAstBool, GriegoAstInt, GriegoAstDouble, GriegoAstString, GrTerm, GrChoice, GrError, GrLower, GrNegate, GrOpt, GrPlus, GrPrecedence, GrRange, GrRule, GrSeq, GrStar, GrString, GrUnquote, GrVar;

	GriegoAstList(value : List<GriegoAst>);
	GriegoAstBool(value : bool);
	GriegoAstInt(value : int);
	GriegoAstDouble(value : double);
	GriegoAstString(value : string);

	GrTerm ::= GrChoice, GrError, GrLower, GrNegate, GrOpt, GrPlus, GrPrecedence, GrRange, GrRule, GrSeq, GrStar, GrString, GrUnquote, GrVar;
	GrChoice(term1 : GrTerm, term2 : GrTerm, tyvar : int);
	GrError(term : GrTerm, tyvar : int);
	GrLower(term : GrTerm, tyvar : int);
	GrNegate(term : GrTerm, tyvar : int);
	GrOpt(term : GrTerm, tyvar : int);
	GrPlus(term : GrTerm, tyvar : int);
	GrPrecedence(term1 : GrTerm, term2 : GrTerm, tyvar : int);
	GrRange(char1 : string, char2 : string, tyvar : int);
	GrRule(id : string, term1 : GrTerm, term2 : GrTerm, tyvar : int);
	GrSeq(term1 : GrTerm, term2 : GrTerm, tyvar : int);
	GrStar(term : GrTerm, tyvar : int);
	GrString(stringq : string, tyvar : int);
	GrUnquote(term : GrTerm, tyvar : int);
	GrVar(id : string, tyvar : int);
}
