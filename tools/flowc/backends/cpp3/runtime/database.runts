[
Cpp3RuntimePart("mysql",
"

struct MysqlDbCon {
	std::shared_ptr<daotk::mysql::connection> con;
	std::string err;
	std::string date_time_format = \"%Y-%m-%d %H:%M:%S\"; //DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");
	std::set<std::string> int_overflow_fields;

	MysqlDbCon(const std::string& host, const std::string& user, const std::string& pwd, const std::string& database, Int port) {
		try {
			daotk::mysql::connect_options opts(
				host, user, pwd, database,
				0, // timeout
				false, // reconnect
				\"\", // init command
				\"\", // charset
				port
			);
			con = std::make_shared<daotk::mysql::connection>();
			con->open(opts);
		} catch (std::exception& e) {
			err = e.what();
		}
	}
	void close() {
		if (con) {
			try {
				con->close();
			} catch (std::exception& e) {
				if (err != \"\") err += \"\\n\";
				err += e.what();
				std::cout << e.what() << std::endl;
			}
		}
	}
	void checkIntOverflow() {
		if (!int_overflow_fields.empty()) {
			// Hope it will never happen with id fields,
			// otherwise we should support long integer in the rule interpreter
			std::string fields = \"\";
			bool first = true;
			for (auto& field : int_overflow_fields) {
				if (!first) fields += \", \";
				fields += field;
				first = false;
			}
			std::cout << \"Warning! These fields: [\" << fields << \"] contains values that are out of 32-bit integers\" << std::endl;
			int_overflow_fields.clear();
		}
	}
};

struct MysqlDbRes {
	MysqlDbRes(Native* n, const std::string& q) : nat(n) {
		if (db()->con) {
			try {
				result = db()->con->query(q);
			} catch (std::exception& e) {
				err = e.what();
			}
		} else {
			err = \"Connection is down\";
		}
	}
	~ MysqlDbRes() {
		decRc(nat);
	}

	inline MysqlDbCon* db() {
		return nat->get<MysqlDbCon*>();
	}
	Native* nat;
	daotk::mysql::result result;
	std::string err;
};
",
"",
"",
"",
"",
[Cpp3Std(["<mysql+++/mysql+++.h>", "<set>"], ["-lmysqlclient"])], false
)
]