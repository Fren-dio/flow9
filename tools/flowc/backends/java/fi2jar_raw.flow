import sys/system;
import sys/target;
import tools/flowc/backends/common;

export {
	fi2JavaBuildRaw(cfg : FiJavaConfig, path : string, callback : (int) -> void) -> void;
}

fi2JavaBuildRaw(cfg : FiJavaConfig, path : string, callback : (int) -> void) -> void {
	jar = changeFileExt(cfg.jarfile, ".jar");
	flowdir = rtrim2(getFlowDir(), "/");
	outdir = if (cfg.outputdir == "") "." else cfg.outputdir;
	exit_handler = \prog, success, failure -> {
		\errcode, stdout, stderr -> {
			if (stdout != "") fcPrintln(stdout, cfg.threadId);
			if (stderr != "") fcPrintln(stderr, cfg.threadId);
			if (errcode == 0) {
				success()
			} else {
				fcPrintln("Failed to run " + prog + ". Check if " + prog + " is installed, JAVA_HOME environment variable is properly defined and is present in your PATH.", cfg.threadId);
				failure(5 + errcode)
			}
		}
	}
	build_program_jar = \-> {
		if (cfg.verbose > 0) {
			fcPrintln("Adding a program to " + jar, cfg.threadId);
		}
		args = ["feu", jar, cfg.packageName + "." + cfg.mainClassName, "-C", cfg.generatedir, strReplace(cfg.packageName, ".", "/")];
		startProcess("jar", args, outdir, "",
			exit_handler("jar",
				\ -> {
					if (cfg.verbose > 0) {
						fcPrintln("Run with \"java -jar " + jar + "\"", cfg.threadId);
					}
					callback(0)
				},
				callback
			)
		)
	}
	build_runtime_jar = \-> {
		if (cfg.verbose > 0) {
			fcPrintln("Adding a runtime to " + jar, cfg.threadId);
		}
		args1 = ["cf", jar, "-C", flowdir + "/platforms/java", "com/area9innovation/flow"];
		args2 = fi2JavaJarDependencies(cfg);
		args3 = fi2JavaRuntimeHosts(cfg);
		args = concat3(args1, args2, args3);
		startProcess("jar", args, outdir, "", exit_handler("jar", build_program_jar, callback))
	}
	compile_java = \ -> {
		if (cfg.verbose > 0) {
			fcPrintln("Compiling the generated code", cfg.threadId);
		}
		cp_sep = if (hasTargetName("windows")) ";" else ":";
		args = ["-Xlint:unchecked", "-encoding", "UTF-8", "-cp", flowdir + "/platforms/java" + cp_sep + "javagen", "@" + path + "/sources"];
		startProcess("javac", args, outdir, "", exit_handler("javac", build_runtime_jar, callback))
	}
	compile_java();
}

fi2JavaJarDependencies(cfg : FiJavaConfig) -> [string] {
	jar_deps = filtermap(cfg.dependencies, \dep ->
		if (!startsWith(dep, "jar")) None() else Some(substring(dep, 4, strlen(dep) - 5))
	);
	mapConcat(jar_deps, \dep -> ["-f", dep]);
}

fi2JavaRuntimeHosts(cfg : FiJavaConfig) -> [string] {
	mapConcat(cfg.externNatives, \nat -> ["-C", nat, "com/area9innovation/flow"]);
}