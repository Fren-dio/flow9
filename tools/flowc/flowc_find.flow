import tools/flowc/manipulation/countvars;
import tools/flowc/preload_modules;
import tools/flowc/completion;
import tools/flowc/find_occurrences;
import lingo/linecolumn;

export {
	handleFindOptions(env : FcTypeEnvGlobal, flowfile : string, prog : FiProgram) -> void;

	findDefDecl(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string, symbol : string) -> void;

	// Uses global cache for lookups.
	fcFastFindUses(config: CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> void;

	// Find a type info for a symbol at given position.
	fcSymbolInfo(config: CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> void;
	fcSymbolInfoMarkDown(config: CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> void;
}

handleFindOptions(env : FcTypeEnvGlobal, file : string, prog : FiProgram) -> void {
	config = prog.config;

	dumpIds = getConfigParameter(config.config, "dump-ids");
	if (dumpIds != "") {
		dumpFcProgramIds(env, prog, dumpIds);
	}

	if (getConfigParameter(config.config, "dump-counts") != "") {
		dumpProgramCounts(prog);
	}
}

findFiExpAtLineCol(config : CompilerConfig, env : FcTypeEnvGlobal, file : string, line : int, col : int, wantType : bool) -> Pair<Maybe<FiExp>, string> {
	workingDir = getConfigParameterDef(config.config, "working-dir", "");
	filepath = findFlowPath(file, true, config.includes, workingDir);
	resolver = fcFileLineResolver(env, filepath);

	linestart = findLineIndex(resolver, line, 0);
	linetext = findLine(resolver, linestart).line;
	charsToColumn = goToColumn(linetext, col);
	mfiexp = switch (fcLoadFromCache(env, file)) {
		Some(cached): {
			loaded = cached.loaded;
			module = loaded.module;
			index = linestart + charsToColumn;

			starts2types = fold(
				module.globalVars,
				fold(
					module.natives,
					fold(
						module.functions,
						makeTree(),
						\acc, fun -> start2ExpForTypes(fun.lambda, acc, wantType)
					),
					\acc, nat -> start2ExpForTypes(nat.fallbackLambda, acc, wantType)
				),
				\acc, gv -> start2ExpForTypes(gv.value, acc, wantType)
			);
			/*
			println("Looking for " + i2s(index));
			println(text);
			traverseInOrder(starts2types, \k, v -> {
				if (iabs(k - index) < 10) {
					println("At " + i2s(k) + " we have semantically");
					println(prettyFiExp(FcPretty(false, true, makeTree(), makeTree()), v));
					codeline = substring(code, k, k + 10);
					println("from code '" + takeBefore(codeline, "\n", codeline) + "'");
				}
			});*/
			treeIntervalSearch(starts2types, index);
		}
		None(): {
			None();
		}
	}
	Pair(mfiexp, linetext);
}

// Given this line, find the index of this column (considering 4-char tab indentation)
goToColumn(line : string, col : int) -> int {
	leadingTabs = countLineIndentation(line);
	if (col < 4 * leadingTabs) col / 4
	else col - 3 * leadingTabs;
}

// Here some starts are shifted, because we need to extract info about variable types, i.e. types of corresponding expressions
start2ExpForTypes(e : FiExp, acc : Tree<int, FiExp>, wantType : bool) -> Tree<int, FiExp> {
	rec = \a, ex -> start2ExpForTypes(ex, a, wantType);
	switch (e) {
		FiLambda(__, body, __, s):    setTree(rec(acc, body), s, e);
		FiCall(f, args, __, s):       setTree(rec(fold(args, acc, rec), f), s, e);
		FiLet(__, __, e1, e2, __, s): {
			// NOTE! Here we use e1, not e, because otherwise we'll get void!
			setTree(rec(rec(acc, e2), e1), s, if (wantType) e1 else e);
		}
		FiIf(e1, e2, e3, __, s):      setTree(rec(rec(rec(acc, e3), e2), e1), s, e);
		FiSwitch(v, __, cs, __, s):   {
			setTree(rec(fold(cs, acc, \a, c -> rec(a, c.body)), v), s, e);
		}
		FiCast(e0, __, __, __, s):    setTree(rec(acc, e0), s, e);
		FiSeq(es, __, s):             setTree(fold(es, acc, rec), s, e);
		FiCallPrim(op, es, __, s): {
			acc2 = fold(es, acc, rec);
			switch (op) {
				// NOTE! Here we use es[1], not e, because otherwise we'll get void!
				FcAssignPrim(): setTree(acc2, s, if (wantType) es[1] else e);
				default: setTree(acc2, s, e);
			}
		}
		FiRequire(__, ex, __, s):     setTree(rec(acc, ex), s, e);
		FiUnsafe(__, fb, __, s):      setTree(rec(acc, fb), s, e);
		FiVar(__, __, s): setTree(acc, s, e);
		FiString(__, s):  setTree(acc, s, e);
		FiBool(__, s):    setTree(acc, s, e);
		FiDouble(__, s):  setTree(acc, s, e);
		FiVoid(s):        setTree(acc, s, e);
		FiInt(__, s):     setTree(acc, s, e);
	}
}

LocalNameSource ::= LocalNameSourceLambdaArg, LocalNameSourceSwitchCaseArg, LocalNameSourceLet, LocalNameSourceStructField;
	LocalNameSourceLambdaArg(expr : FiLambda, idx : int);
	LocalNameSourceSwitchCaseArg(expr : FiSwitch, idxCase : int, idxArg : int);
	LocalNameSourceLet(expr : FiLet);
	LocalNameSourceStructField(expr : FiCallPrim);

findLocalNameSource(e : FiExp, name : string, maxPos : int) -> Maybe<LocalNameSource> {
	rec = \ex -> findLocalNameSource(ex, name, maxPos);
	tryFn = \acc, fn -> {
		if (isSome(acc)) {
			acc;
		} else {
			fn();
		}
	}
	recAcc = \acc, ex -> tryFn(acc, \ -> rec(ex));
	recArr = \exs -> foldr(exs, None(), recAcc);

	checkStart = \start -> start <= maxPos && start >= -maxPos;
	checkMyStart = \fn -> if (checkStart(e.start)) fn() else None();
	switch (e) {
		FiLambda(args, body, __, __): checkMyStart(\ -> {
			tryFn(rec(body), \ -> {
				maybeMap(
					findi(args, \a -> a.name == name),
					\idx -> LocalNameSourceLambdaArg(e, idx)
				);
			});
		});
		FiCall(f, args, __, __): checkMyStart(\ -> recAcc(recArr(args), f));
		FiLet(name2, __, e1, e2, __, __): checkMyStart(\ -> {
			tryFn(recAcc(rec(e2), e1), \ -> {
				if (name2 == name) {
					Some(LocalNameSourceLet(e));
				} else {
					None();
				}
			});
		});
		FiIf(e1, e2, e3, __, __): checkMyStart(\ -> recAcc(recAcc(rec(e3), e2), e1));
		FiSwitch(v, __, cases, __, __): checkMyStart(\ -> {
			foldri(cases, None(), \idxCase, acc, case -> {
				if (checkStart(case.start)) {
					tryFn(recAcc(acc, case.body), \ -> {
						maybeMap(
							findi(case.argNames, eq(name)),
							\idxArg -> LocalNameSourceSwitchCaseArg(e, idxCase, idxArg)
						);
					});
				} else {
					None();
				}
			});
		});
		FiCast(e0, __, __, __, __): checkMyStart(\ -> rec(e0));
		FiSeq(es, __, __): checkMyStart(\ -> recArr(es));
		FiCallPrim(op, es, __, __): {
			tryFn(recArr(es), \ -> {
				switch (op) {
					FcFieldPrim(name2): {
						if (name2 == name && checkStart(e.start)) {
							Some(LocalNameSourceStructField(e));
						} else {
							None();
						}
					}
					default: None();
				}
			});
		}
		FiRequire(__, ex, __, __): checkMyStart(\ -> rec(ex));
		FiUnsafe(__, fb, __, __): checkMyStart(\ -> rec(fb));
		FiVar(__, __, __): None();
		FiString(__, __): None();
		FiBool(__, __): None();
		FiDouble(__, __): None();
		FiVoid(__): None();
		FiInt(__, __): None();
	}
}

nameAndFcType(name : string, type : FcType) -> string {
	name + " : " + prettyFcType(
		FcPretty(false, true, makeTree(), makeTree()),
		type,
		makeSet()
	)
}

dumpFcProgramIds(env : FcTypeEnvGlobal, prog : FiProgram, file : string) -> void {
	ids = foldTree(prog.modules, [], \modname, module : FiModule, acc -> {
		pc = FcPretty(true, true, makeTree(), makeTree());
		pt = \t -> prettyFiType(pc, t, makeSet());
		psu = \t -> prettyFiStructOrUnion(pc, t, makeSet());
		allIds = isConfigParameterTrue(prog.config.config, "dump-ids-all");

		pathParts = ["file " + module.fileinfo.flowfile]; //], strSplit(module.flowfile, "/")));
		resolver = fcFileLineResolver(env, module.fileinfo.fullpath);

		fl = \pos -> {
			i2s(findLine(resolver, pos).lineno);
		}

		imports = map(module.imports, \im -> "import " + im.flowfile);
		module_exports = buildSet(module.exports);

		structs = fold(module.structs, [], \acc2, s ->
			if (allIds || containsSet(module_exports, s.name)) {
				// TODO: We should expand the struct fields here
				// struct Text(text : string, style : [CharacterStyle])
				arrayPush(acc2, "struct " + psu(s) + ";");
			} else acc2
		);
		unions = fold(module.unions, [], \acc2, u ->
			if (allIds || containsSet(module_exports, u.name)) {
				// TODO: We should expand the union structs here
				// union Form ::= Text, ...;
				arrayPush(acc2, "union " + trim2(psu(u), "()") + ";");
			} else acc2

		);

		natives = fold(module.natives, [], \acc2, na : FiNativeDec ->
			if (allIds || containsSet(module_exports, na.name)) {
				arrayPush(acc2, "native " + na.name + " : " + pt(na.type) + " = " + na.nativeName + ";");
			} else acc2
		);

		functions = fold(module.functions, [], \acc2, fn : FiFunctionDec ->
			if (allIds || containsSet(module_exports, fn.name)) {
				arrayPush(acc2, "function " + fn.name + pt(fn.type) + ";");
			} else acc2
		);

		vars = fold(module.globalVars, [], \acc2, gv ->
			if (allIds || containsSet(module_exports, gv.name)) {
				arrayPush(acc2, "global " + gv.name + " : " + pt(gv.type) + ";");
			} else acc2
		);

		strings = concatA([pathParts, imports, structs, unions, natives, functions, vars]);
		arrayPush(acc, strings)
	});
	allstrings = concatA(ids);
	text = strGlue(allstrings, "\n");
	setFileContent(file, text);
	{}
}

findDefDecl(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string, name : string) -> void {
	doFindDefDecl(config, globEnv, file, name, true)
}

doFindDefDecl(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string, name : string, first_time : bool) -> void {
	switch (fcLookupNameInCache(globEnv, name)) {
		Some(symbol): {
			switch (fcLoadFromCache(globEnv, symbol.module)) {
				Some(cached): {
					fileinfo = cached.loaded.module.fileinfo;
					proc_decl = \dec, def -> {
						if (getConfigParameter(config.config, "find-definition") != "") {
							if (def >= 0) {
								printLocation(config, globEnv, fileinfo, def, def + strlen(name), "");
							} else if (dec >=0) {
								printLocation(config, globEnv, fileinfo, dec, dec + strlen(name), "");
							}
						} else if (getConfigParameter(config.config, "find-declaration") != "") {
							if (dec >= 0) {
								printLocation(config, globEnv, fileinfo, dec, dec + strlen(name), "");
							} else if (def >= 0) {
								printLocation(config, globEnv, fileinfo, def, def + strlen(name), "");
							}
						} else if (getConfigParameter(config.config, "find-defdecl") != "") {
							if (def >= 0) {
								printLocation(config, globEnv, fileinfo, def, def + strlen(name), "");
							}
							if (dec != def && dec >= 0) {
								printLocation(config, globEnv, fileinfo, dec, dec + strlen(name), "");
							}
						}
					}
					switch (symbol.named) {
						FiTypeStruct(__,__,__, start): printLocation(config, globEnv, fileinfo, start, start + strlen(name), "");
						FiTypeUnion(__,__,__, start):  printLocation(config, globEnv, fileinfo, start, start + strlen(name), "");
						FiFunctionDec(__,__,__, dec, def): proc_decl(dec, def);
						FiGlobalVar(__,__,__, dec, def): proc_decl(dec, def);
						FiNativeDec(__,__,__,__,__, dec, def): proc_decl(dec, def);
					}
				}
				None(): {
					if (first_time) {
						if (fcTryToLoadFile(config, globEnv)) {
							doFindDefDecl(config, globEnv, file, name, false);
						}
					} else {
						fcPrintln("Fail: could not find definition/declaration for " + name, config.threadId);
					}
				}
			}
		}
		None(): {
			if (first_time) {
				if (fcTryToLoadFile(config, globEnv)) {
					doFindDefDecl(config, globEnv, file, name, false);
				}
			} else {
				fcPrintln("Fail: could not find definition/declaration for " + name, config.threadId);
			}
		}
	}
}

fcFastFindUses(config: CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> void {
	fcDoFastFindUses(config, globEnv, name, line, col, true);
}

fcDoFastFindUses(config: CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int, first_time : bool) -> void {
	switch (fastSymbolNature(config, globEnv, name, line, col)) {
		Some(nature): {
			print_location = \module, pos -> {
				if (pos >= 0) {
					printLocation(config, globEnv, module.fileinfo, pos, pos + strlen(nature.name), " uses " + nature.name);
				}
			}
			module_uses = \module ->
				iterSet(
					fcFastFindOccurrencesInFiModule(config, globEnv, module, nature),
					\pos -> print_location(module, pos)
			);
			switch (nature.scope) {
				FcGlobalScope(): {
					fcIterCache(globEnv, \m -> module_uses(m));
				}
				FcModuleScope(): {
					maybeApply(
						fcLoadFromCache(globEnv, nature.module),
						\cached -> if (!cached.outdated) module_uses(cached.loaded.module)
					);
				}
				FcLocalScope(): {
					maybeApply(
						fcLoadFromCache(globEnv, getTargetModuleName(config)),
						\cached -> {
							if (!cached.outdated) {
								module = cached.loaded.module;
								iterSet(fcFindLocalOccurrences(globEnv, module, line, col, nature.name, nature.kind),
									\pos -> print_location(module, pos + 1)
								);
							}
						}
					);
				}
			}
		}
		None(): {
			if (first_time) {
				if (fcTryToLoadFile(config, globEnv)) {
					fcDoFastFindUses(config, globEnv, name, line, col, false);
				}
			} else {
				fcPrintln("Fail: couldn't find " + name, config.threadId);
			}
		}
	}
}

fcSymbolInfo(config: CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> void {
	fcDoSymbolInfo(config, globEnv, name, line, col, true);
}

fcDoSymbolInfo(config: CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int, first_time : bool) -> void {
	switch (fastSymbolNature(config, globEnv, name, line, col)) {
		Some(nature): {
			switch (nature.cached) {
				Some(cached): {
					fcPrintln(fcCacheNamed2s(cached), config.threadId);
				}
				None(): {
					maybeApply(
						fcLoadFromCache(globEnv, getTargetModuleName(config)),
						\cached -> {
							if (!cached.outdated) {
								maybeApply(findFiExpInModuleAtLineCol(globEnv, cached.loaded.module, line, col, true),
									\e -> fcPrintln(prettyFiType(dummyPretty, fiExpType(e), makeSet()), config.threadId)
								);
							}
						}
					);
				}
			}
		}
		None(): {
			if (first_time) {
				if (fcTryToLoadFile(config, globEnv)) {
					fcDoSymbolInfo(config, globEnv, name, line, col, false);
				}
			}
		}
	}
}

fcSymbolInfoMarkDown(config : CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> void {
	output = \description -> {
		content = strGlue([
			"```flow",
			description,
			"```",
		], "\n");
		fcPrintln(content, config.threadId);
	}
	err = \msg -> {
		if (config.verbose > 0) {
			fcPrintln("*Cannot find* `" + name + "`: *" + msg + "*", config.threadId);
		}
	}
	def = \ -> {
		moduleName = getTargetModuleName(config);
		eitherFn(
			fcLoadFromCache(globEnv, moduleName),
			\cached : FcCacheModule -> {
				if (!cached.outdated) {
					eitherFn(
						findNameTypeInFiExp(config, globEnv, cached.loaded.module, name, line, col),
						\type -> output(name + " : " + prettyFiType(dummyPretty, type, makeSet())),
						\ -> err("`" + name + "` can't be found, try recompiling the file (F7)")
					);
				} else {
					err("Cache is out of date, try compiling the file (F7)");
				}
			},
			\ -> err("Module is not cached, try compiling the file (F7)")
		);
	}
	switch (fastSymbolNature(config, globEnv, name, line, col)) {
		Some(nature): {
			switch (nature.cached) {
				Some(cached): {
					output(fcCacheNamed2s(cached));
				}
				None(): def();
			}
		}
		None(): {
			def();
		}
	}
}

findNameTypeInFiExp(config : CompilerConfig, env : FcTypeEnvGlobal, module : FiModule, name : string, line : int, col : int) -> Maybe<FiType> {
	maybeBind(
		findNameDefInModuleAtLineCol(config, env, module, name, line, col),
		\localDef -> {
			switch (localDef) {
				LocalNameSourceLambdaArg(lambda, idx): Some(lambda.args[idx].type);
				LocalNameSourceSwitchCaseArg(sw, idxCase, idxArg): {
					structName = sw.cases[idxCase].struct;
					notFound = \reason -> {
						if (config.verbose > 0) {
							fcPrintln(reason + "<br>", config.threadId);
						}
						None();
					}
					eitherFn(
						find(module.structs, \s -> s.name == structName),
						\struct -> {
							if (length(struct.args) > idxArg) {
								Some(struct.args[idxArg].type);
							} else {
								// should not happen
								notFound("There is no arg " + i2s(idxArg));
							}
						},
						\ -> notFound("There is no struct `" + structName + "`")
					);
				}
				LocalNameSourceLet(let): Some(let.type);
				LocalNameSourceStructField(prim): Some(prim.type);
			}
		}
	);
}

findFiExpInModuleAtLineCol(env : FcTypeEnvGlobal, module : FiModule, line : int, col : int, wantType : bool) -> Maybe<FiExp> {
	resolver = fcFileLineResolver(env, module.fileinfo.fullpath);
	index = findLineIndex(resolver, line, col);
	starts2types = fold(
		module.globalVars,
		fold(
			module.natives,
			fold(
				module.functions,
				makeTree(),
				\acc, fun -> start2ExpForTypes(fun.lambda, acc, wantType)
			),
			\acc, nat -> start2ExpForTypes(nat.fallbackLambda, acc, wantType)
		),
		\acc, gv -> start2ExpForTypes(gv.value, acc, wantType)
	);
	treeIntervalSearch(starts2types, index);
}

findNameDefInModuleAtLineCol(config : CompilerConfig, env : FcTypeEnvGlobal, module : FiModule, name : string, line : int, col : int) -> Maybe<LocalNameSource> {
	resolver = fcFileLineResolver(env, module.fileinfo.fullpath);
	index = findLineIndex(resolver, line, col);

	accFn = \acc, e : FiExp -> {
		if (e.start > index) {
			acc;
		} else {
			eitherFn(
				acc,
				\accExpr -> {
					if (e.start > accExpr.start) {
						Some(e);
					} else {
						acc;
					}
				},
				\ -> Some(e)
			);
		}
	}
	exprM = fold(map(module.globalVars, \gv -> gv.value),
		fold(map(module.natives, \n -> n.fallbackLambda),
			fold(map(module.functions, \f -> f.lambda), None(),
				accFn
			),
			accFn
		),
		accFn
	);
	eitherFn(exprM,
		\expr -> {
			source = findLocalNameSource(expr, name, index);
			if (isNone(source)) {
				if (config.verbose > 0) {
					fcPrintln("`" + name + "` is not found at position " + i2s(index) + " in expression: " + toString(expr) + "<br>", config.threadId);
				}
			}
			source;
		},
		\ -> {
			if (config.verbose > 0) {
				fcPrintln("There is no expression at position " + i2s(index) + "<br>", config.threadId);
			}
			None();
		}
	);
}

fcCacheNamed2s(cached : FcCacheNamed) -> string {
	symbol = cached.named;
	decl = switch (symbol) {
		FiStructOrUnion(): prettyFiStructOrUnion(FcPretty(true, true, makeTree(), makeTree()), symbol, makeSet());
		FiDeclaration(): prettyFiDeclaration(dummyPretty, symbol, makeSet());
	};
	cached.module + (if (cached.exported) "" else " (local name)") + ":\n\n" + decl;
}

fcTryToLoadFile(conf : CompilerConfig, env : FcTypeEnvGlobal) -> bool {
	if (isConfigParameterSet(conf.config, "server-mode")) false else {
		// Load silently: error messages are suppressed
		config = CompilerConfig(conf with config = setTree(conf.config, "no-errors", "1"));
		parseAndTypecheckProgram(config, env, config.flowfile).second == 0;
	}
}
