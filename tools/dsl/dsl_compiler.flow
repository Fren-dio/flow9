import tools/dsl/dsl_parse;

export {
	// Prepares a compiler from the given language to the target language
	makeCompiler(grammar : DslGrammar, target : string, blueprints : string) -> DslCompiler;
}

DslCompiler(
	language : DslGrammar,
	target : string,
	blueprints : DslAst
);

makeCompiler(grammar : DslGrammar, target : string, blueprints : string) -> DslCompiler {
	blueprintlang = defineGrammar("blueprint", <<
		translations = ws $"nil" (translation $"cons")*;

		translation = pattern "=>" ws output ";" ws $"translation_2";

		pattern = id "(" ws args ")" ws $"pattern_2"
			| id $"id_1";

		args = $"nil" pattern $"cons" ("," ws pattern $"cons")*
			| $"nil";

		output = $"nil" (blueprint $"cons")* $"output_1";

		blueprint = 
			bind 
			| string;
		bind = "$" id "(" ws int ")" ws $"bindprec_2"
			| "$" id $"bind_1";

		string = $('"' onechar_* '"') ws;

		onechar_ = backslash "u" hexdigit hexdigit hexdigit hexdigit
			| backslash "x" hexdigit hexdigit
			| backslash escapedchar_
			| !'"' !backslash anychar;

		hexdigit = '0'-'9'
			| 'a'-'f'
			| 'A'-'F';

		escapedchar_ = backslash | '"' | "n" | "t" | "r";
		backslash = '\';

		id = $('a'-'z'+) ws;
		int = $('0'-'9'+) ws $"s2i";
		translations
	>>, true);

	prints = parseProgram(blueprintlang, blueprints);
	// println(prettyDsl(prints));

	DslCompiler(
		grammar,
		target,
		prints,
	);
}
