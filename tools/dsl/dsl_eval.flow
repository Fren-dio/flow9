import tools/dsl/dsl_parse;

export {
	makeDslEnv() -> DslEnv;
	evaluateDsl(env : DslEnv, p : DslAst) -> DslAst;
}

DslEnv(env : Tree<string, DslAst>);

makeDslEnv() -> DslEnv {
	DslEnv(makeTree());
}

evaluateDsl(env : DslEnv, p : DslAst) -> DslAst {
	switch (p) {
		DslNode(name, args, pos): {
			if (name == "ifelse") {
				cond = evaluateDsl(env, args[0]);
				evaluateDsl(env, if (getDslBool(cond)) args[1] else args[2]);
			} else if (name == "let") {
				let = getDslString(args[0]);
				val = evaluateDsl(env, args[1]);
				nenv = DslEnv(setTree(env.env, let, val));
				evaluateDsl(nenv, args[2]);
			} else if (name == "var") {
				lookupTreeDef(env.env, getDslString(args[0]), args[0]);
			} else if (name == "lambda") {
				// TODO: Instantiate closures
				p;
			} else if (name == "call") {
				lambda : DslNode = getDslNode(evaluateDsl(env, args[0]));
				eargs : List<DslAst> = getDslList(evaluateDsl(env, args[1]));
				if (lambda.name == "lambda") {
					nargs = list2array(getDslList(lambda.args[0]));
					body = lambda.args[1];
					nenv = DslEnv(foldi(list2array(eargs), env.env, \i, acc, arg -> {
						// println("Setting par " + getDslString(nargs[i]) + " to " + prettyDsl(arg));
						setTree(acc, getDslString(nargs[i]), arg)
					}));
					evaluateDsl(nenv, body);
				} else {
					println("ERROR: Can not call " + prettyDsl(lambda));
					p;
				}
			} else if (name == "and") {
				// Shortcircut
				left = evaluateDsl(env, args[0]);
				if (getDslBool(left)) {
					evaluateDsl(env, args[1]);
				} else left;
			} else if (name == "or") {
				// Shortcircut
				left = evaluateDsl(env, args[0]);
				if (getDslBool(left)) {
					left
				} else evaluateDsl(env, args[1]);
			} else {
				// Normal functions
				eargs = map(args, \a -> {
					evaluateDsl(env, a);
				});
				mnative = getDslNative(name);
				mnative ?? {
					mnative.fn(eargs)
				} : {
					// OK, we fallback to construction
					DslNode(name, eargs, pos);
				}
			}
		}
		DslList(value): {
			DslList(mapList(value, \v -> evaluateDsl(env, v)));
		}
		DslBool(value): p;
		DslInt(value): p;
		DslDouble(value): p;
		DslString(value): p;
	}
}

DslNativeBuiltin(
	fn : (([DslAst]) -> DslAst)
);

builtinNativeDsls : ref Maybe<Tree<string, DslNativeBuiltin>> = ref None();

getDslNative(name : string) -> Maybe<DslNativeBuiltin> {
	two = \fn : (DslAst, DslAst) -> DslAst -> {
		DslNativeBuiltin(\args -> fn(args[0], args[1]))
	};
	n : Tree<string, DslNativeBuiltin> = onlyOnce(builtinNativeDsls, \ -> {
		pairs2tree([
			Pair("add", two(addDsl)),
			Pair("sub", two(subDsl)),
			Pair("mul", two(mulDsl)),
			Pair("div", two(divDsl)),
			Pair("mod", two(modDsl)),
			Pair("equal", two(equalDsl)),
			Pair("not_equal", two(notEqualDsl)),
			Pair("less", two(lessDsl)),
			Pair("less_equal", two(lessEqualDsl)),
			Pair("greater", two(greaterDsl)),
			Pair("greater_equal", two(greaterEqualDsl)),
		])
	});
	lookupTree(n, name);
}

addDsl(left : DslAst, right : DslAst) -> DslAst {
	error = \ -> {
		println("Can not add " + prettyDsl(left) + " and " + prettyDsl(right));
		DslString("ERROR");
	}
	switch (left) {
		DslBool(value): error();
		DslInt(lvalue): {
			switch (right) {
				DslInt(rvalue): DslInt(lvalue + rvalue);
				DslDouble(rvalue): DslDouble(i2d(lvalue) + rvalue);
				DslString(rvalue): DslString(i2s(lvalue) + rvalue);
				default: error();
			}
		}
		DslDouble(lvalue): {
			switch (right) {
				DslInt(rvalue): DslDouble(lvalue + i2d(rvalue));
				DslDouble(rvalue): DslDouble(lvalue + rvalue);
				DslString(rvalue): DslString(d2s(lvalue) + rvalue);
				default: error();
			}
		}
		DslString(lvalue): {
			switch (right) {
				DslInt(rvalue): DslString(lvalue + i2s(rvalue));
				DslDouble(rvalue): DslString(lvalue + d2s(rvalue));
				DslString(rvalue): DslString(lvalue + rvalue);
				default: error();
			}
		}
		DslList(lvalue): error();
		DslNode(name, args, pos): error();
	}
}

subDsl(left : DslAst, right : DslAst) -> DslAst {
	error = \ -> {
		println("Can not subtract " + prettyDsl(left) + " and " + prettyDsl(right));
		DslString("ERROR");
	}
	switch (left) {
		DslBool(value): error();
		DslInt(lvalue): {
			switch (right) {
				DslInt(rvalue): DslInt(lvalue - rvalue);
				DslDouble(rvalue): DslDouble(i2d(lvalue) - rvalue);
				default: error();
			}
		}
		DslDouble(lvalue): {
			switch (right) {
				DslInt(rvalue): DslDouble(lvalue - i2d(rvalue));
				DslDouble(rvalue): DslDouble(lvalue - rvalue);
				default: error();
			}
		}
		DslString(lvalue): error();
		DslList(lvalue): error();
		DslNode(name, args, pos): error();
	}
}

mulDsl(left : DslAst, right : DslAst) -> DslAst {
	error = \ -> {
		println("Can not multiply " + prettyDsl(left) + " and " + prettyDsl(right));
		DslString("ERROR");
	}
	switch (left) {
		DslBool(value): error();
		DslInt(lvalue): {
			switch (right) {
				DslInt(rvalue): DslInt(lvalue * rvalue);
				DslDouble(rvalue): DslDouble(i2d(lvalue) * rvalue);
				default: error();
			}
		}
		DslDouble(lvalue): {
			switch (right) {
				DslInt(rvalue): DslDouble(lvalue * i2d(rvalue));
				DslDouble(rvalue): DslDouble(lvalue * rvalue);
				default: error();
			}
		}
		DslString(lvalue): error();
		DslList(lvalue): error();
		DslNode(name, args, pos): error();
	}
}

divDsl(left : DslAst, right : DslAst) -> DslAst {
	error = \ -> {
		println("Can not multiply " + prettyDsl(left) + " and " + prettyDsl(right));
		DslString("ERROR");
	}
	switch (left) {
		DslBool(value): error();
		DslInt(lvalue): {
			switch (right) {
				DslInt(rvalue): DslInt(lvalue / rvalue);
				DslDouble(rvalue): DslDouble(i2d(lvalue) / rvalue);
				default: error();
			}
		}
		DslDouble(lvalue): {
			switch (right) {
				DslInt(rvalue): DslDouble(lvalue / i2d(rvalue));
				DslDouble(rvalue): DslDouble(lvalue / rvalue);
				default: error();
			}
		}
		DslString(lvalue): error();
		DslList(lvalue): error();
		DslNode(name, args, pos): error();
	}
}

modDsl(left : DslAst, right : DslAst) -> DslAst {
	error = \ -> {
		println("Can not multiply " + prettyDsl(left) + " and " + prettyDsl(right));
		DslString("ERROR");
	}
	switch (left) {
		DslBool(value): error();
		DslInt(lvalue): {
			switch (right) {
				DslInt(rvalue): DslInt(lvalue % rvalue);
				DslDouble(rvalue): DslDouble(i2d(lvalue) % rvalue);
				default: error();
			}
		}
		DslDouble(lvalue): {
			switch (right) {
				DslInt(rvalue): DslDouble(lvalue % i2d(rvalue));
				DslDouble(rvalue): DslDouble(lvalue % rvalue);
				default: error();
			}
		}
		DslString(lvalue): error();
		DslList(lvalue): error();
		DslNode(name, args, pos): error();
	}
}

compareDsl(left : DslAst, right : DslAst) -> int {
	genericCompare(left, right);
}

equalDsl(left : DslAst, right : DslAst) -> DslAst {
	DslBool(compareDsl(left, right) == 0);
}

notEqualDsl(left : DslAst, right : DslAst) -> DslAst {
	DslBool(compareDsl(left, right) != 0);
}

lessDsl(left : DslAst, right : DslAst) -> DslAst {
	DslBool(compareDsl(left, right) < 0);
}

lessEqualDsl(left : DslAst, right : DslAst) -> DslAst {
	DslBool(compareDsl(left, right) <= 0);
}

greaterDsl(left : DslAst, right : DslAst) -> DslAst {
	DslBool(compareDsl(left, right) > 0);
}

greaterEqualDsl(left : DslAst, right : DslAst) -> DslAst {
	DslBool(compareDsl(left, right) >= 0);
}
