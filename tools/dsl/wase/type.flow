import tools/dsl/dsl_typing;

export {
	typeWase(ast : DslAst) -> DslAst;
}

typeWase(ast : DslAst) -> DslAst {
	dslTypeInfer(ast, mergeWaseTypes, typecheckWase);
}

mergeWaseTypes(acc : DslTypeAcc, left : DslAst, right : DslAst) -> DslAst {
	println("TODO: Merge these types " + prettyDsl(left) + " and " + prettyDsl(right));
	left;
}

typecheckWase(acc : DslTypeAcc, node : DslAst, getChildTypes : () -> [DslAst]) -> DslAst {
	switch (node) {
		DslBool(__): DslString("i32");
		DslInt(__): DslString("i32");
		DslDouble(__): DslString("f64");
		DslString(__): DslNode("array", [DslString("i16")], 0);
		DslList(value): {
			DslList(fold(getChildTypes(), makeList(), \acc2, t -> Cons(t, acc2)));
		}
		DslNode(name, args, pos): {
			if (name == "type") {
				args[0];
			} else if (name == "idtype") {
				getChildTypes()[1]
			} else {
				println("TODO: Type check " + prettyDsl(node));
				DslNode("any", [], 0)
			}
		}
	}
}
