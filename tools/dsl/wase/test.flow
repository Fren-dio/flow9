import tools/dsl/wase/parse;
import tools/dsl/wase/type;
import tools/dsl/wase/compile;

// Test that evaluation of this testcase gives the expected program
testWase(testname : string, testcase : string, expected : string) -> void {
	program = parseWase(testname, testcase);

	typed = typeWase(program);
	println("Compiling");

	wase = dsl2wase(typed);

	got = prettyDsl(program);
	if (expected != got) {
		println(testname + " FAILED. Expected: ");
		println(expected);
		println("Got after eval:");
		println(got);
		println("As wase:");
		println(wase);
		println("Typed:");
		println(typed);
	}
}

main() {
	// Shows that recursion of dynamic code does not work well at compile time
	testWase("wase 1",
		<< 
			export foo : mutable i32 = 42;

			bar(a : f64, n : i32) -> (i32, i64) {
				n + 1;
			}
			// table calls : (i32) -> i32 = [1, 2];
//			calls : table<(i32) -> i32> = [1, 2];
		>>,
		<< >>
	);

	quit(0);
}
