import tools/dsl/wase/parse;
import tools/dsl/wase/type;
import tools/dsl/wase/compile;
import formats/wasm/wasm_encode;

// Test that evaluation of this testcase gives the expected program
compileWase2File(filename : string, testcase : string, onDone : () -> void) -> void {
	program = parseWase(filename, testcase);

	typed = typeWase(program);
	println("Compiling " + filename);
	wase = dsl2wase(typed);

	got = prettyDsl(program);
	if (true) {
		println("Typed:");
		println(prettyDsl(typed));
		println("As wase:");
		println(wase);
	}

	wasm = wase2wasm(wase);
	println(wasm);
	bytes = wasmModule2bytes(wasm);
	
	setFileContentBytes(filename + ".wasm", 
		fold(bytes, "", \acc, byte -> {
			acc + fromCharCode(byte)
		})
	);

	startProcess("wasm2wat", [filename + ".wasm", "-o", filename + ".wat"], ".", "", \ec, so, se -> {
		println(ec);
		println(so);
		println(se);
		onDone();
	});
}

main() {
	compileWase2File("wase1",
		<< 
			export foo : mutable f64 = 42.1;

			bar(n : auto) -> auto {
				foo + n + 1.0;
			}

			main() -> () {
				bar(4.3);
				{}
			}
			// table calls : (i32) -> i32 = [1, 2];
//			calls : table<(i32) -> i32> = [1, 2];
		>>,
		\ -> {
			quit(0);
		}
	);
}
