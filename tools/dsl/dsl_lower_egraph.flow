import tools/dsl/registry/dsl_registry;
import tools/dsl/registry/dsl_specification;
import tools/dsl/dsl_match_egraph;
import tools/dsl/registry/dsl_run;
import tools/dsl/dsl_rules;
import tools/dsl/dsl_rightside;

export {
	// Define a lowering from a given language to another, running the "to" program in the given language
	defineDslLowering(from : DslGrammar, to : DslGrammar, sep : string, rules : string) -> DslLowering;

	// Does a bottom-up visit of the e-graph, visiting the nodes that
	// match the language suffix, and then applying those nodes with the
	// result of their children
	lowerDslEGraph(e : DslAstEnv, eclass : int,
		specification : string,
		lowering : DslLowering,
	) -> Maybe<DslENode>;
}

defineDslLowering(from : DslGrammar, to : DslGrammar, sep : string, rules : string) -> DslLowering {
	trules = parseRules(from, to, rules, sep);
	patterns : List<DslReplacement> = mapList(getDslList(trules.rules), \rule -> {
		node = getDslNode(rule);
		pattern = node.args[0];
		replacement = node.args[1];
		DslReplacement(pattern, replacement);
	});

	DslLowering(patterns, "lambda");
}

lowerDslEGraph(env : DslAstEnv, eclass : int, 
	specification : string,
	lowering : DslLowering,
) -> Maybe<DslENode> {
	e = env.egraph;
	root = getDslEClassRoot(e, eclass);
	nodes = getDslEClassNodes(e, root);
	matching = set2array(filterSet(nodes, \n -> matchDslSpecification(n.language, specification)));
	if (length(matching) > 1) {
		println("We have more nodes than one");
	}
	rewritten = ref false;
	best = fold(matching, None(), \acc, preferred : DslENode -> {
		children = filtermap(preferred.args, \childClass -> {
			lowerDslEGraph(env, childClass, specification, lowering)
		});
		if (length(children) != length(preferred.args)) {
			println("ERROR: Expected more children in lowering");
			acc
		} else {
			term = combineENode(preferred, children);

			resultLanguage = resultDslTransformation(preferred.language, specification);
			rewrote = lowerDslENode(env, specification, resultLanguage, lowering, root, preferred, term);
			rewritten := rewrote || ^rewritten;
			node = DslENode(
				resultLanguage,
				// TODO: If the lower did rewrite, we should pick up the rewritten node
				// here instead
				term,	
				preferred.args
			);
			if (rewrote) Some(node)
			else {
				// If we did not rewrite, keep a previous result if there is one
				if (acc == None()) Some(node) else acc
			}
		}
	});
	if (!^rewritten && matching != []) {
		// OK, we have to just lower it immediately
		node = matching[0];
		// println("Alright, we have to just directly lower for e" + i2s(eclass) + " " + prettyDsl(node.value));

		resultLanguage = resultDslTransformation(node.language, specification);
		newENode = DslENode(node with language = resultLanguage);
		newEclass = addDslENode(env.egraph, newENode);
		unionDslEClass(env.egraph, eclass, newEclass);
		{}
	}
	// println(i2s(eclass) + " " + toString(best));
	best;
}

// OK, we know this node is the right language. Process it
lowerDslENode(e : DslAstEnv, specification : string, resultLanguage : string, 
			lowering : DslLowering, eclass : int, node : DslENode, term : DslAst) -> bool {
	foldList(lowering.replacements, false, \acc, r : DslReplacement -> {
		acc || lowerDslENodeWithReplacement(e, specification, resultLanguage, lowering.toLanguage, r, eclass, term)
	});
}

lowerDslENodeWithReplacement(e : DslAstEnv, specification : string, resultLanguage : string, 
		toLanguage : string, replacement : DslReplacement, eclass : int, term : DslAst) -> bool {
	acc = DslENodeMatch(makeTree(), false);
	bindings = dslENodeMatch(acc, term, replacement.pattern);
	if (!bindings.fail) {
		result = evalDslRightSide(e, bindings.bindings, specification, toLanguage, replacement.replacement);
		
		if (false) {
			println("This match: " + prettyDsl(term) + " against " + prettyDsl(replacement.pattern));
			/*traverseInOrder(bindings.bindings, \name, val -> {
				println("  " + name + " = " + prettyDsl(val));
			});*/
			println("gives " + prettyDsl(result));
		}

		newEclass = addDslAst(e.egraph, resultLanguage, result);
		// println("Adding " + prettyDsl(result) + " as e" +i2s(newEclass));
		unionDslEClass(e.egraph, eclass, newEclass);
		true
	} else {
		false;
	}
}
