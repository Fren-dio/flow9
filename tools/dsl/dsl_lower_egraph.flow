import tools/dsl/registry/dsl_registry;
import tools/dsl/registry/dsl_specification;

export {
	// Does a bottom-up visit of the e-graph, visiting the first node that
	// match the filter, and then applying those nodes with the
	// result of their children
	transformDslEGraph(e : DslEGraph, eclass : int,
		specification : string,
		// Given this node, from the "fromFilter" world,
		// with children from the "toFilter" world,
		// convert the node to the toFilter
		applyFn : (node : DslENode, children : [DslENode]) -> DslENode
	) -> Maybe<DslENode>;
}

transformDslEGraph(e : DslEGraph, eclass : int, 
		specification : string,
	applyFn : (node : DslENode, children : [DslENode]) -> DslENode
) -> Maybe<DslENode> {
	root = getDslEClassRoot(e, eclass);
	nodes = getDslEClassNodes(e, root);
	matching = set2array(filterSet(nodes, \n -> matchDslSpecification(n.language, specification)));
	if (matching != []) {
		// We just pick the first match
		preferred : DslENode = matching[0];
		children = filtermap(preferred.args, \childClass -> {
			transformDslEGraph(e, childClass, specification, applyFn)
		});
		if (length(children) != length(preferred.args)) {
			println("ERROR: Expected more children in transformation");
			None();
		} else {
			Some(applyFn(preferred, children));
		}
	} else {
		None();
	}
}
