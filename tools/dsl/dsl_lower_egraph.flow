import tools/dsl/registry/dsl_registry;
import tools/dsl/registry/dsl_specification;
import tools/dsl/dsl_lowering;

export {
	// Does a bottom-up visit of the e-graph, visiting the first node that
	// match the filter, and then applying those nodes with the
	// result of their children
	lowerDslEGraph(e : DslEGraph, eclass : int,
		specification : string,
		lowering : DslLowering,
	) -> Maybe<DslENode>;
}

lowerDslEGraph(e : DslEGraph, eclass : int, 
	specification : string,
	lowering : DslLowering,
) -> Maybe<DslENode> {
	root = getDslEClassRoot(e, eclass);
	nodes = getDslEClassNodes(e, root);
	matching = set2array(filterSet(nodes, \n -> matchDslSpecification(n.language, specification)));
	if (matching != []) {
		// We just pick the first match
		preferred : DslENode = matching[0];
		children = filtermap(preferred.args, \childClass -> {
			lowerDslEGraph(e, childClass, specification, lowering)
		});
		if (length(children) != length(preferred.args)) {
			// println("ERROR: Expected more children in transformation");
			None();
		} else {
			// TODO: Match against each rule in the lowering
			None();
		}
	} else {
		None();
	}
}
