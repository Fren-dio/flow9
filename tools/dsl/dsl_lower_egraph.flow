import tools/dsl/registry/dsl_registry;
import tools/dsl/registry/dsl_specification;
import tools/dsl/dsl_match_egraph;
import tools/dsl/dsl_lowering;

export {
	// Does a bottom-up visit of the e-graph, visiting the first node that
	// match the filter, and then applying those nodes with the
	// result of their children
	lowerDslEGraph(e : DslEGraph, eclass : int,
		specification : string,
		lowering : DslLowering,
	) -> Maybe<DslENode>;
}

lowerDslEGraph(e : DslEGraph, eclass : int, 
	specification : string,
	lowering : DslLowering,
) -> Maybe<DslENode> {
	root = getDslEClassRoot(e, eclass);
	nodes = getDslEClassNodes(e, root);
	matching = set2array(filterSet(nodes, \n -> matchDslSpecification(n.language, specification)));
	if (matching != []) {
		// We just pick the first match
		preferred : DslENode = matching[0];
		children = filtermap(preferred.args, \childClass -> {
			lowerDslEGraph(e, childClass, specification, lowering)
		});
		if (length(children) != length(preferred.args)) {
			// println("ERROR: Expected more children in transformation");
			None();
		} else {
			term = combineENode(preferred, children);

			lowerDslENode(e, specification, lowering, term);

			node = DslENode(
					resultDslTransformation(preferred.language, specification),
					term,
					preferred.args
				);
			Some(node);
		}
	} else {
		None();
	}
}

// OK, we know this node is the right language. Process it
lowerDslENode(e : DslEGraph, specification : string, lowering : DslLowering, term : DslAst) -> void {
	iterList(lowering.replacements, \r : DslReplacement -> {
		lowerDslENodeWithReplacement(e, specification, r.pattern, term)
	})
}

combineENode(node : DslENode, children : [DslENode]) -> DslAst {
	val = node.value;
	switch (node.value) {
		DslBool(value): val
		DslInt(value): val
		DslDouble(value): val
		DslString(value): val
		DslList(value): DslList(array2list(map(children, \c -> c.value)));
		DslNode(name, args, pos): DslNode(name, map(children, \c -> c.value), pos);
	}
}

lowerDslENodeWithReplacement(e : DslEGraph, specification : string, pattern : DslAst, term : DslAst) -> void {
	acc = DslENodeMatch(makeTree(), false);
	bindings = dslENodeMatch(acc, term, pattern);
	if (!bindings.fail) {
		println("TODO: Process this match: " + prettyDsl(term) + " against " + prettyDsl(pattern));
	}
}

