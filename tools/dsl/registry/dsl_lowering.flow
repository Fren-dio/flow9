import tools/dsl/registry/dsl_transformation;
import tools/dsl/registry/dsl_parser;
import tools/dsl/registry/dsl_registry;
import tools/dsl/dsl_lowering;

export {
	// Build a lowering transformation which can implement the given spefication
	registerDslLowering(phase : string, specification : string, fromLanguage : string, toLanguage : string, sep : string, rules : string) -> void;
}

registerDslLowering(phase : string, specification : string, fromLanguage : string, toLanguage : string, sep : string, rules : string) -> void {
	fromGrammar = buildDslGrammar(fromLanguage);
	fromGrammar ?? {
		mtoGrammar = buildDslGrammar(toLanguage);
		switch (mtoGrammar) {
			None(): {
				println("Unknown to-language " + toLanguage + " for lowering " + specification);
			}
			Some(toGrammar): {
				lowering : DslLowering = defineDslLowering(fromGrammar, toGrammar, sep, rules);
				transformation = DslTransformation(
					phase,
					specification,
					\astenv -> {
						// TODO: Here, we can in fact evaluate the program using the registry
						// for the right hand sides
						ast = lowerDsl(lowering, astenv.ast);
						DslAstEnv(astenv with ast = ast);
					}
				);
				registerDslTransformation(transformation);
			}
		}
	} : {
		println("Unknown from-language " + fromLanguage + " for lowering " + specification);
	}
}
