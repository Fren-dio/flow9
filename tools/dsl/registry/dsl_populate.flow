import tools/dsl/registry/dsl_run;
import tools/dsl/registry/dsl_lowering;
import fs/filesystem;
import tools/dsl/languages/lambda;
import tools/dsl/languages/gringo;
import tools/dsl/languages/ast_syntax;

export {
	// Reads all DSL files in the given folder and registers them
	// We get: lambda, gringo, ast, quotestring
	populateDsls(folder : string) -> void;
}

populateDsls(folder : string) -> void {
	registerBasicDsls();

	files = readDirectory(folder);
	dsls = filter(files, \f -> endsWith(f, ".dsl"));

	iter(dsls, \dsl -> {
		registerDslFile(pathCombine(folder, dsl));
	});
	println("Populating languages done.\n");
}

registerDslFile(file : string) -> void {
	content = getFileContent(file);
	println("Registering " + file);

	env = DslEnv(makeTree(), makeTree(), 
		pairs2tree([
			Pair("registerDslParser", \args -> {
				lang = getDslString(args[0]);
				gram = getDslString(args[1]);
				reqs = map(list2array(getDslList(args[2])), getDslString);
				registerDslParser(lang, gram, reqs);
				DslBool(true)
			}),
			Pair("registerDslParserExtension", \args -> {
				lang = getDslString(args[0]);
				gram = getDslString(args[1]);
				registerDslParserExtension(lang, gram);
				DslBool(true)
			}),
			Pair("registerDslLowering", \args -> {
				phase = getDslString(args[0]);
				spec = getDslString(args[1]);
				from = getDslString(args[2]);
				to = getDslString(args[3]);
				sep = getDslString(args[4]);
				rules = getDslString(args[5]);
				registerDslLowering(phase, spec, from, to, sep, rules);
				DslBool(true)
			}),
			Pair("registerDslRewriting", \args -> {
				phase = getDslString(args[0]);
				spec = getDslString(args[1]);
				from = getDslString(args[2]);
				to = getDslString(args[3]);
				sep = getDslString(args[4]);
				rules = getDslString(args[5]);
				costs = getDslString(args[6]);
				def = getDslString(args[7]);
				registerDslRewriting(phase, spec, from, to, sep, rules, costs, def);
				DslBool(true)
			}),
		])
	);

	evalDslProgram(env, "lambda-quotestring", content);
	{}
}

registerBasicDsls() {
	defineLambda();
	defineDslAst();	
	defineGringo();

	// OK: We need quote string
	registerDslParserExtension("quotestring", "
		atom = atom | '<<' $(!'>>' anychar)* '>>' ws;
	");
}
