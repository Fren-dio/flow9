import tools/dsl/registry/dsl_run;
import fs/filesystem;
import tools/dsl/languages/lambda;
import tools/dsl/languages/gringo;
import tools/dsl/languages/ast_syntax;

export {
	// Reads all DSL files in the given folder and registers them
	// We get: lambda, gringo, ast, quotestring
	populateDsls(folder : string) -> void;
}

populateDsls(folder : string) -> void {
	registerBasicDsls();

	files = readDirectory(folder);
	dsls = filter(files, \f -> endsWith(f, ".dsl"));

	iter(dsls, \dsl -> {
		registerDslFile(pathCombine(folder, dsl));
	});
}

registerDslFile(file : string) -> void {
	content = getFileContent(file);
	println("Registering " + file);

	env = DslEnv(makeTree(), makeTree(), 
		pairs2tree([
			Pair("registerDslParser", \args -> {
				println("TODO: Register parser");
				DslBool(true)
			}),
			Pair("registerDslParserExtension", \args -> {
				lang = getDslString(args[0]);
				gram = getDslString(args[1]);
				registerDslParserExtension(lang, gram);
				DslBool(true)
			}),
			Pair("registerDslRewriting", \args -> {
				println("TODO: Register rewriting");
				DslBool(true)
			}),
		])
	);

	evalDslProgram(env, "lambda-quotestring", content);
	{}
}

registerBasicDsls() {
	defineLambda();
	defineDslAst();	
	defineGringo();

	// OK: We need quote string
	registerDslParserExtension("quotestring", "
		atom = atom | '<<' $(!'>>' anychar)* '>>' ws;
	");
}
