import tools/dsl/dsl_parse;
import tools/dsl/dsl_lowering;
import tools/dsl/languages/ast_syntax;

export {
	/*
		Adds syntax for default arguments in functions
		with "top-level" function syntax

		foo(a = 1, b = 2) {
			exp
		}
		scope

		becomes

		foo = \a, b -> exp;
		foo = \a -> foo(a, 2);
		foo = \ -> foo(1, 2);
		scope
	*/
	defineDefaultArgs(language : DslLanguage) -> DslLanguage;
}

defineDefaultArgs(language : DslLanguage) -> DslLanguage {
	functions = extendGrammar(language.grammar, << 
		atom = id "(" ws fundef_args ")" ws "{" ws exp "}" ws expsemi $"brace_1" $"function_4" | atom;

		fundef_args = $"nil" fundef_arg $"cons" ("," ws fundef_arg $"cons")* ("," ws)? | $"nil";
		fundef_arg = id "=" ws exp $"funargdef_2" | id $"funarg_1";
	>>);

	// function(id, args, body) => id = \args -> body
	lowering = defineDslLowering(defineDslAst().grammar, language, ";;", <<
			function($id, $args, $body, $scope) => {
				fargs = map(args, \a -> {
					nodeChild(a, 0)
				});
/*				node = nodeName(a);
				if (node == "funargdef") {
				} else {
				}
*/
				var = let(id, lambda(fargs, body), scope);
				println(var);
				var
			} ;;
		>>);

	DslLanguage("functions", functions, None(), Some(lowering), None(),
		makeTree(),
		[], Some(language)
	);
}
