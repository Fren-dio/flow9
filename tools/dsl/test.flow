import tools/dsl/languages/lambda;
import tools/dsl/languages/gringo;
import tools/dsl/languages/ast_syntax;
import tools/dsl/languages/structs;
import tools/dsl/languages/records;
import tools/dsl/languages/default_args;
import tools/dsl/languages/named_args;
import tools/dsl/languages/while;

import tools/dsl/dsl2flow;
import tools/dsl/dsl_api;

import tools/dsl/gringo_actions;


main() {
	if (false) {
		gringo = defineGringo();
		testGringo = parseDsl("test-gringo", gringo, << 
			truth = listof(keyword('true'), "," ws);
			truth
		>>);
		gr = dsl2flow(testGringo);
		println(gterm2string(gr));
		println(compileDsl(gringo.compilers[0], testGringo));
	}

	lambda = defineLambda();

	if (true) {
		lang = defineNamedArgs(defineRecords(lambda));
		testValue = parseDsl("test-program", lang, << 
			foo(a = 1, b = 3, c = 4) {
				println(a);
				println(b);
				println(c);
				a
			};
			foo(a:1, b:2, c:3);
			foo(1, 2, 3)
		>>);

		println(prettyDsl(testValue));

		optimized = optimizeDsl(lambda, testValue);
		if (false) {
			println(prettyDsl(testValue));
			println("is optimized to\n");
			println(prettyDsl(optimized));
			// 123 + 23 + 34 + 34
		}

		program = compileDsl(lambda.compilers[0], optimized);
		println("The program   " /*+ prettyDsl(testValue) */ + "   compiles to " + program);

		println("It evaluates to " + prettyDsl(evaluateDsl(prepareDslEnv(makeDslEnv(), lang), testValue)));
	}

	if (false) {
		programs = [<< 1 + 2 * 3 >>, << (1 + 2) * 3 >>, << 1 - 2 - 3 >>, << (1 - 2) - 3 >>, << 1 - (2 - 3) >>];
		iter(programs, \p -> {
			program2 = parseProgram("test-programs", lambda.grammar, p);
			println("Testing precedence and associativity: " + p + " => " + compileDsl(lambda.compilers[0], program2) + "  =  " + prettyDsl(evaluateDsl(makeDslEnv(), program2)));
		});
	}

	println("Done");
	quit(0);
}
