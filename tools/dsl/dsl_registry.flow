import tools/dsl/dsl_transformation;
import ds/tree;

export {
	// Facility to register transformations for the language facility
	registerDslTransformation(d : DslTransformation) -> void;

	// Perform this transformations to this input, doing all that is required
	performDslTransformations(transform : string, toLanguage : string, input : DslAstEnv) -> DslAstEnv;

		DslAstEnv(
			language : string,
			ast : DslAst,
			env : Tree<string, DslAst>,
			error : string
		);
}

// Lookup from kind to transformations
dslTransformationsKinds : ref Tree<string, [DslTransformation]> = ref makeTree();

registerDslTransformation(d : DslTransformation) -> void {
	dslTransformationsKinds := treePushToArrayValue(^dslTransformationsKinds, d.kind, d);
}

performDslTransformations(transform : string, toLanguage : string, input : DslAstEnv) -> DslAstEnv {
	transformations = findTransformationPath(input.language, transform, toLanguage);
	fold(transformations, input, \acc, tr -> {
		performDslTransformation(acc, tr)
	});
}

findTransformationPath(fromLang : string, transform : string, toLang : string) -> [DslTransformation] {
	transforms = getTreeArrayValue(^dslTransformationsKinds, transform);
	suitable = filter(transforms, \t : DslTransformation -> {
		t.fromLanguage == fromLang
	});
	final = filter(suitable, \t : DslTransformation -> {
		t.toLanguage == toLang
	});
	if (final != []) final
	else {
		// OK, see if we can find it through the other languages that are available
		println("TODO: Could not find direct path from " + fromLang + " to " + toLang + " for " + transform);
		[];
	}
}

performDslTransformation(input : DslAstEnv, transformation : DslTransformation) -> DslAstEnv {
	fn = transformation.fn;
	switch (fn) {
		DslTransformParse(parserLanguage, grammar): {
			DslAstEnv(input with error = "TODO: Implement parsing of " + parserLanguage);
		}
		DslTransformLower(fromSyntax, toLanguage, rules, runtime): {
			DslAstEnv(input with error = "TODO: Implement lowering");
		}
		DslTransformRewrite(fromSyntax, toLanguage, rules, costs, default, runtime): {
			DslAstEnv(input with error = "TODO: Implement rewriting");
		}
	}
}
