import ds/tree;
import ds/simplegraph;
import sys/concurrent;
import promise;

export {
	/*
	A scheduler for potentially asynchronous functions to run in multiple
	threads. The jobs support parents and dependencies.
	*/
	makeScheduler() -> Scheduler<?, ??>;
	// Prepare a scheduler to run asynchronously. Returns a 
	runScheduler(scheduler : Scheduler<?, ??>) -> () -> void;

	// Construct a new job id
	getJobId(scheduler : Scheduler<?, ??>) -> int;
	// Schedule this job
	addJob(scheduler : Scheduler<?, ??>, job : Job<?, ??>) -> void;
	// Invalidate cache item
	invalidateJobCache(scheduler : Scheduler<?, ??>, cacheId : string) -> void;

	Scheduler(
		// What is a next id for a job?
		nextId : ref int,
		// From job id to the job
		jobs : ref Tree<int, Job<?, ??>>,
		// Priorities - list of jobs with a given priority
		jobPriorities : ref Tree<int, [int]>,
		// Tracking the dependencies between jobs
		dependencies : ref SimpleGraph<int, int>,
	);

	Job(
		// Unique id for the job
		id : int,
		// Lower is earlier
		priority : int,
		// Is this a part of a group of work? 0 if no parent
		parent : int, 
		// What other jobs do we depend on?
		dependencies : [int],
		// Any information about the job that the job would like to get
		context : ?,
		// Do we have a cache for the result? 0 is no, otherwise it is the unique hash id
		cacheId : string,
		// Persist the result on disk?
		persist : bool,
		// What is the result of this job?
		result : ref Maybe<??>,
		// The function that runs the job when dependencies are done
		// If we have an older cached value, that is also given
		run : (Task<?, ??>) -> Promise<??, string>,
	);

	Task(
		s : Scheduler<?, ??>, 
		job : Job<?, ??>, 
		parents : [Job<?, ??>], 
		dependencies : [Job<?, ??>], 
		cache : Maybe<??>
	);

}

makeScheduler() -> Scheduler<?, ??> {
	Scheduler(
		// What is a next id for a job?
		ref 1,
		// From job id to the job
		ref makeTree(),
		// Priorities - list of jobs with a given priority
		ref makeTree(),
		// Tracking the dependencies between jobs
		ref makeSimpleGraph(),
	);
}

runScheduler(scheduler : Scheduler<?, ??>) -> () -> void {
	println("TODO: Start scheduler in a new thread");
	\ -> {
		println("TODO: Cancel the jobs")
	}
}

getJobId(scheduler : Scheduler<?, ??>) -> int {
	atomicRefIntAddition(scheduler.nextId, 1)
}

addJob(scheduler : Scheduler<?, ??>, job : Job<?, ??>) -> void {
	println("TODO: Add job to scheduler");
}

invalidateJobCache(scheduler : Scheduler<?, ??>, cacheId : string) -> void {
	println("TODO: Invalidate cache entry");
}
